#class {bot} {open}

#var bot[active] 1;
#var bot[paused] 0;
#var bot[walk] 1;

#var bot[foundmob] 0;
#var bot[foundobject] 0;
#var bot[foundplayer] 0;

#var bot[stats][mobs] 0;
#var bot[stats][xp] 0;
#var bot[stats][gxp] 0;
#var bot[stats][coins] 0;
#var bot[stats][loop][mobs] 0;
#var bot[stats][loop][xp] 0;
#var bot[stats][loop][gxp] 0;
#var bot[stats][loop][coins] 0;
#var temp_xp 0;
#var temp_coins 0;

#format {bot[start-time]} {%T} {};

#NOP -- Read in the whitelist of players or followers to ignore;
#read common/bot/whitelist.tin;

#NOP -- pre_bot check is loaded via the char/user/config.tin;
.pre_bot_check;

#NOP -- If we're not resuming a bot, then set the step to 1, expand the botpath, and set the botmobs
#if {$botResume} {
    #NOP;
} {
    #var bot[step] 1;
    #list bot[steps] create {$bot[path]};
    #NOP -- If user is a necromancer, add the undeads from conjure to the botmobs;
    #if {"$guild" == "necromancer"} {
        #list botmobs add {{{long} {An undead smote} {target} {smote}}};
        #list botmobs add {{{long} {An undead visyn} {target} {visyn}}};
        #list botmobs add {{{long} {An undead spirit} {target} {spirit}}};
        #list botmobs add {{{long} {An undead horrin} {target} {horrin}}};
        #list botmobs add {{{long} {An undead zombie} {target} {zombie}}};
        #list botmobs add {{{long} {An undead skeleton} {target} {skeleton}}};
        #list botmobs add {{{long} {An undead wrack} {target} {wrack}}};
    };
    #var bot[mobs] $botmobs;
};


#if $check_death {
        #echo {<ffe>------ CHECKDEATH IS ACTIVE --------<088>};
    } {
        #echo {<ffe>------ CHECKDEATH IS NOT ACTIVE --------<088>};
};

#alias bot_report {
    #var bot_loop_xp $bot[stats][loop][xp];
    #var bot_xp $bot[stats][xp];
    #var bot_loop_coins $bot[stats][loop][coins];
    #var bot_coins $bot[stats][coins];

    thousandsFormatNumber bot_loop_xp;
    thousandsFormatNumber bot_xp;
    thousandsFormatNumber bot_loop_coins;
    thousandsFormatNumber bot_coins;
    
    #format loop1 {%+20s %-20s} {<BBB><aad>          Mobs Killed: $bot[stats][loop][mobs]};
    #format loop2 {%+20s %-20s} {<BBB><aad>            XP Gained: $bot_loop_xp};
    #format loop3 {%+20s %-20s} {<BBB><aad>         Coins Earned: $bot_loop_coins};
    
    #format total1 {%+20s %-20s} {<BBB><aad>          Mobs Killed: $bot[stats][mobs]};
    #format total2 {%+20s %-20s} {<BBB><aad>            XP Gained: $bot_xp};
    #format total3 {%+20s %-20s} {<BBB><aad>         Coins Earned: $bot_coins};
    
    #echo {<BBB><aad>---------------------------------------------------<088>};
    #echo {<BBB><aad>--------------     Current Loop     ---------------<088>};
    #echo {$loop1};
    #echo {$loop2};
    #echo {$loop3};
    #echo {<BBB><aad>---------------------------------------------------<088>};
    #echo {<BBB><aad>--------------     Total Run        ---------------<088>};
    #echo {$total1};
    #echo {$total2};
    #echo {$total3};
    #echo {<BBB><aad>---------------------------------------------------<088>};
    #echo {<BBB><aad>---------------------------------------------------<088>};
};

#alias bot_xp {
    #if {"%1" == "start"} {
        #action {^You have %* total xp.$} {
            #math bot[stats][xp] 0;
            #math bot[stats][loop][xp] 0;
            #format my[xp] {%d} {%%1};
            #unaction {^You have %* total xp.$};
        } {2};
        xp;
        #if {"$draw[status][active]" == "on"} {#delay 2 {draw_status}};
    } {
        #math bot[stats][loop][mobs] {$bot[stats][loop][mobs] + 1};
        #math bot[stats][mobs] {$bot[stats][mobs] + 1};
        #action {^You have %* total xp.$} {
            #format temp_xp {%d} {%%1};
            #if {$my[xp] > 0 && "$temp_exp" != "$my[xp]"} {
                #if {$temp_xp > $my[xp]} {
                    #math fight_xp {$temp_xp - $my[xp]};
                    #math bot[stats][xp] {$bot[stats][xp] + $fight_xp};
                    #math bot[stats][loop][xp] {$bot[stats][loop][xp] + $fight_xp};
                    #format my[xp] {%d} {%%1};
                } {
                    #NOP -- If current xp is less than total xp (spent it on stats or died) update my[xp] to reflect the new baseline;
                    #format my[xp] {%d} {%%1}; 
                }
            } {
                #format my[xp] {%d} {%%1};
            };
            #unaction {^You have %* total xp.$};
        };
        xp;
        #if {"$draw[status][active]" == "on"} {#delay 2 {draw_status}};
    };
};

#alias bot_coins {
    #action {^You are carrying %d coins in loose change.$} {
        #var temp_coins %%1;
        #if {$my[coins] > 0 && "$temp_coins" != "$my[coins]"} {
            #if {$temp_coins > $my[coins]} {
                #math fight_coins {$temp_coins - $my[coins]};
                #math bot[stats][coins] {$bot[stats][coins] + $fight_coins};
                #math bot[stats][loop][coins] {$bot[stats][loop][coins] + $fight_coins};
                #format my[coins] {%d} {%%1};
            } {
                #NOP -- If current coins are less than starting coins, we'll update the new baseline;
                #format my[coins] {%d} {%%1}; 
            };
        } {
            #format my[coins] {%d} {%%1};
        };
        #unaction {^You are carrying %d coins in loose change.$};
    };
    coins;
};

#alias playercheck {
    #if $bot[playercheck] {
        #var bot[playercheck] 0;
        #delay .2 {#echo {<BAF><ffe>------ PLAYERCHECK IS NOW OFF --------<088>}};
    } {
        #var bot[playercheck] 1;
        #delay .2 {#echo {<BAF><ffe>------ PLAYERCHECK IS NOW ON --------<088>}};
    };
};

/* kill the bot */
#alias {.stop} {
    #var lastBot $bot;
    #unvar bot;
    #unalias {..};
    #unalias {.onPrompt};
    #unact {^>$};
    #class {bot} {kill};
    #class {xbot} {kill};
    #echo {Bot killed.};
    #if {"$draw[status][active]" == "on"} {#delay 2 {draw_status}};
};

#alias .pause {
    #map get roomvnum bot[pause_room];
    #var lastBot $bot;
    #undelay bot_kick;
    #var bot[paused] 1;
    #if {"$draw[status][active]" == "on"} {#delay 2 {draw_status}};
};


#act {^-M-_%*} {
    #var mob[long] %1;
    #regex {$mob[long]} {attacking you} {#var bot[aggro-mob] 1;};
    #format {mob[long]} {%p} {$mob[long]};

    #foreach $bot[mobs][%*] botmob {
        #regexp {$mob[long]} {$botmob[long]} {
            #var bot[foundmob] 1;
            #var mob[target] $botmob[target];
        };
    };
    #undelay {bot_kick};
    #undelay {bot_restart};
} {2};


#act {^{-i-|-w-|-a-|-o-}%*.$} {
    #if {$bot[active] && !$bot[paused] && $bot[walk]} {
        #if {$collector[items]} {
            #var item_number 1;
            #var item_long %2;

            #replace item_long {.} {};
            #replace item_long { \[%*\]} {};

            #regex {%2} {7B{[0-9]+}} {#var item_number &1;#replace item_long { \\x7B%*} {};};
            #regex {%2} {7B{[A-Za-z]+}} {#replace item_long { \\x7B%*} {};};

            #foreach $item_grab_list[%*] item {
                #regexp {"$item_long"} {$item[long]} {
                    #$item_number get $item[target];
                    #if {"$guild" == "bard"} {
                        identify $item[target];
                    };
                    #if {"$guild" == "priest"} {
                        recognize $item[target];
                    };
                    #if {"$item[target]" == "bag"} {
                        #loop 2 20 i {put bag in bag $i};
                    };
                };
            };
        };
    };
} {2};


#alias .botStep {
    #if !$bot[paused] {
        #format bot[timeLastStep] $bot[timeStepTaken];
        #format bot[timeStepTaken] {%U};
        #math bot[timeBetweenSteps] {($bot[timeStepTaken] - $bot[timeLastStep]) * .0001};
        #if {$bot[step] >= &bot[steps][]} {
            ${bot[steps][${bot[step]}]};
            #showme {------- BOT COMPLETE -----};
            .botComplete;
        } {
            ${bot[steps][${bot[step]}]};
            #math bot[step] {$bot[step] + 1};
        };
    };
};

#NOP -- starts or continues the bot after it's loaded;
#alias {..} {
    #class {xbot} {open};
	#var bot[paused] 0;

    #act {{^-R-_(.*)-R-_}} {
        #if {!$bot[paused]} {
            #var room_short %%1;
            #var room_item 0;
            .onRoom;
        };
    } {1};

	#alias {.onRoom} {
        #var bot[foundmob] 0;
        #var bot[foundobject] 0;
        #var bot[foundplayer] 0;
        #var bot[aggro-mob] 0;
        .prompt;
	};

    #alias {.prompt} {
        #act {^>$} {.onPrompt} {1};
    };

	#alias {.onPrompt} {
        #if {$bot[foundplayer]} {
            .stop_prompt;
            #var bot[walk] 1;
           .botStep;
        } {
            #if {$collector[items]} {
                #if {"$area" == "Chaotic Sewers"} {#NOP} {get all;}
            };
            #if {$bot[foundmob]} {
                .stop_prompt;
                .pre_fight_check;

                #unact {{^-R-_(.*)-R-_}};
                #if {!$bot[aggro-mob]} {
                    #if {$mob_kill_action} {
                        .mob_kill_action;
                    } {
                        kill $mob[target];
                    };
                };
            } {
                #if {$bot[foundobject]} {
                    #send $object_action;
                    #var bot[foundobject] 0;
                } {
                    .stop_prompt;
                    #if {$check_room} {
                        .check_room;
                    } {
                        #var bot[walk] 1;
                        .botStep;
                    };
                };
            };
        };
    };

    #alias {.stop_prompt} {
        #map get roomvnum bot[curVnum];
        #unact {^>$};
        #var bot[walk] 0;
        #if {"$draw[status][active]" == "on"} {draw_status};
    };
    
	glance;

	#class {xbot} {close};
};

#alias {.bot} {#if {$bot[paused] == 0} {..}};

#action {{(.*) (screeches in agony and falls to the ground, dead|gasps for breath, then slumps into death|gurgles in his own blood as he dies|gurgles in her own blood as she dies|gurgles in its own blood as it dies){1}\.}} {
    #echo {----- BOT REGISTERED KILL -----};
    #if {"%1" == "Fire Mite"} {
        #if {"$guild" == "mage"} {cast spell tap on corpse;cast corpse blast};
        #if {"$guild" == "bard"} {perform dirge};
        .bot;
    } {
        bot_xp;
        bot_coins;
        #var bot[foundmob] 0;
        #var bot[aggro-mob] 0;
        #if !$idle_flag {
            #if $actions_stacked {
                do_action;
                #delay 2 {
                    #if $check_death {
                        .check_death;
                    } {
                        corpse_trig;
                        .bot;
                    };
                };
            } {
                #if $check_death {
                    .check_death;
                } {
                    corpse_trig;
                    .bot;
                };
            };
        };
    };
} {1};

#NOP -- If you're not in combat and not walking, then begin walking;
#ticker {bot_ticker} {
    #if !$bot[paused] {
        #if {$bot[active] && !$idle_flag && !$bot[walk] && !$incombat} {
            #delay {bot_kick} {
                #if {!$bot[walk] && !$incombat} {
                    #echo {<dfa>BOT STUCK RESUMING IN 3 SECONDS<088>};
                    #delay {bot_restart} {.bot} {3};
                };
            } {3};
        };
    };
} {5};

/* Signify there is a player in the room, if not in friends list */
#act {{^-P-_(.*)}} {
    #if $bot[playercheck] {
        #var bot[foundplayer] 1;
    };
} {2};


/* Bot end actions... */
#alias {.botComplete} {
    #NOP -- We do a BOT COMPLETE here to give a pattern for kayos stepper to match and start loading;
    #NOP -- the bunker botpaths;
    #showme {------- BOT COMPLETE -----};
    #echo {<dfa>BOT HAS COMPLETED LOOP ENTERED<088>};
    #if !$bot[paused] {
        #if {!$bot[loop]} {
            #echo {<dfa>\nBot finished.<088>};
            #format {bot[report-time]} {%T} {};
            #math bot[delta-time] {$bot[report-time] - $bot[start-time]};
            #if {$bot[delta-time] > 3600} {
                #math bot[delta-time] {$bot[delta-time] / 3600 * 1.00};
                #math bot[delta-rate] {$bot[stats][xp] / $bot[delta-time]};
                thousandsFormatNumber bot[delta-rate];
                #var xp_rate_str $bot[delta-rate]/hr ($bot[delta-time] Hrs);
            } {
                #math bot[delta-time] {$bot[delta-time] / 60 * 1.00};
                #math bot[delta-rate] {$bot[stats][xp] * 60 / $bot[delta-time]};
                thousandsFormatNumber bot[delta-rate];
                #var xp_rate_str $bot[delta-rate]/hr ($bot[delta-time] mins);
            };
            #var temp_xp $bot[stats][xp];
            thousandsFormatNumber temp_xp;
            ptell Bot Complete. Mobs Killed: $bot[stats][mobs] XP Gained: $temp_xp ($xp_rate_str);
            #echo {<dfa>Coins Earned: $bot[stats][coins]<088>};
            #if {&{botcycle[]} > 1} {
                nextarea
            } {
                .stop;
            };
        } {
            #if $bot[stats][loop][mobs] {
                #var bot[stats][loop][mobs] 0;
                #var bot[stats][loop][xp] 0;
                #var bot[stats][loop][coins] 0;
                #echo {\nLooping bot.};
                #var bot[step] 1;
                .bot;
            } {
                #echo {\nBot finished.};
                #format {bot[report-time]} {%T} {};
                #math bot[delta-time] {$bot[report-time] - $bot[start-time]};
                #if {$bot[delta-time] > 3600} {
                    #math bot[delta-time] {$bot[delta-time] / 3600 * 1.00};
                    #math bot[delta-rate] {$bot[stats][xp] / $bot[delta-time]};
                    thousandsFormatNumber bot[delta-rate];
                    #var xp_rate_str $bot[delta-rate]/hr ($bot[delta-time] Hrs);
                } {
                    #math bot[delta-time] {$bot[delta-time] / 60 * 1.00};
                    #math bot[delta-rate] {$bot[stats][xp] * 60 / $bot[delta-time]};
                    thousandsFormatNumber bot[delta-rate];
                    #var xp_rate_str $bot[delta-rate]/hr ($bot[delta-time] mins);
                };
                #var temp_xp $bot[stats][xp];
                thousandsFormatNumber temp_xp;
                ptell Bot Complete. Mobs Killed: $bot[stats][mobs] XP Gained: $temp_xp ($xp_rate_str);
                #echo {Coins Earned: $bot[stats][coins]};
                #if {&{botcycle[]} > 1} {
                    nextarea
                } {
                    .stop;
                };
            }
        };
    };
} {2};


#class {bot} {close}