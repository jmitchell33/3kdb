#alias common_strategy kill;
#class common_strategy open;

#NOP -- Set some variables for multi-round actions or toggles;
#var iprime_round 1;
#var subjugate_toggle 1;

#alias formatStrategy {
    #format result {<acf>-----<fff> %+15s  %s<088>} {%1} {%2};
    #showme $result;
};


#alias strategy-list {
    formatStrategy {Name} {Desc};
    #foreach $strategyList[%*] item {
        formatStrategy {$item[name]} {$item[description]};
    };
    #showme \n<bab>strategy<088> <bcc>name<088> to add or remove a strategy;
};

#alias strategy-clear {
    #list strategyActive clear;
    #if {"$draw[strategy][active]" == "on"} {draw_strategy};
};

#alias strategy {
    #list {strategyList} {find} {%0} {tempListIndex};
    #var tempList $strategyList[+$tempListIndex];
    #if {&tempList[] > 0} {
        #NOP -- If the strategyActive list exists, check if the selected strategy is a member and toggle it;
        #NOP -- Otherwise, if there is no strategyActive list, we add it;
        #if {&strategyActive[] > 0} {
            #list strategyActive indexate name;
            #list {strategyActive} {find} {%0} {strategyExists};
            #if {$strategyExists} {
                #showme <caa>----  <fff> %0 is now an <baa>inactive<088> <fff>strategy <caa>  ----<088>;
                #list strategyActive filter {} {%0};
            } {
                #list strategyActive add {{{name} {$tempList[name]} {active} {1}}};
                #showme <caa>----  <fff> %0 is now an <bfd>active<088> <fff>strategy  <caa>  ----<088>;
            };
        } {
            #list strategyActive add {{{name} {$tempList[name]} {active} {1}}};
            #showme <caa>----  <fff> %0 is now an <bfd>active<088> <fff>strategy  <caa>  ----<088>;
        };
    } {
        #showme <caa>----  <fff> %0 not found in Strategy List.  <caa>  ----<088>;
        #showme <caa>----  <fff> 'strategy-list' will show a list of available strategies  <caa>  ----<088>;
    };
    #if {"$draw[strategy][active]" == "on"} {draw_strategy};
};

#alias strategies {
    #showme {<ffb>   Active Strategies   <088>};
    #var inactiveStrats <ffb>   Inactive Strategies   <088>;
    #foreach $strategyActive[%*] item {
        #showme {<efe>   $item[name]   <088>};
    };
    #foreach $strategyList item {
        #var inactiveStrategies ${strategyList};
        #list inactiveStrategies indexate name;
        #foreach $strategyActive[%*] active {
            #list inactiveStrategies filter {} {$active[name]};
        };
    };
    #if {&inactiveStrategies[] > 0} {
        #showme {\n<ffb>   Inactive Strategies   <088>};
        #foreach $inactiveStrategies[%*] index {
            #if {"$index[guild]" == "all" || "$index[guild]" == "$guild"} {
                #showme {<cba>   $index[name]   <088>};
            };
        };
    };
    #showme \n<bab>strategy<088> <bcc>name<088> to add or remove a strategy;
    #showme <bab>strategy-list<088> to see available strategies;
};


#list strategyList clear;
#list strategyList add {{{guild} {all} {name} {lucanus} {active} {0} {description} {Automatically uses amulet and ring}}};
#list strategyList add {{{guild} {all} {name} {epowers} {active} {0} {description} {Automatically use fry, shred, ewell}}};
#list strategyList add {{{guild} {all} {name} {rolm}    {active} {0} {description} {Automatically use owl rune}}};
#list strategyList add {{{guild} {all} {name} {bplate}  {active} {0} {description} {Blood Plate: Automatically feed}}};
#list strategyList add {{{guild} {bard} {name} {backstab}  {active} {0} {description} {Backstab}}};
#list strategyList add {{{guild} {bard} {name} {hammer}  {active} {0} {description} {Hammer Smashed Face}}};
#list strategyList add {{{guild} {bard} {name} {rainbow} {active} {0} {description} {Rainbow of Death}}};
#list strategyList add {{{guild} {bard} {name} {cloud}   {active} {0} {description} {Noxious Cloud}}};
#list strategyList add {{{guild} {bard} {name} {vortex}  {active} {0} {description} {Lightning Vortex}}};
#list strategyList add {{{guild} {bard} {name} {assault} {active} {0} {description} {Martial Assault}}};
#list strategyList add {{{guild} {bard} {name} {enrage}  {active} {0} {description} {Enrage}}};
#list strategyList add {{{guild} {necromancer} {name} {snare}  {active} {0} {description} {Vamp/Were: Snare}}};
#list strategyList add {{{guild} {necromancer} {name} {call}  {active} {0} {description} {Call Familiar}}};
#list strategyList add {{{guild} {necromancer} {name} {maim}  {active} {0} {description} {Were: Maim}}};
#list strategyList add {{{guild} {necromancer} {name} {scythe}  {active} {0} {description} {Reaper: Scythe}}};
#list strategyList add {{{guild} {necromancer} {name} {harvest}  {active} {0} {description} {Reaper: Grim Harvest}}};
#list strategyList add {{{guild} {necromancer} {name} {soulbind}  {active} {0} {description} {Reaper: Soulbind}}};
#list strategyList add {{{guild} {necromancer} {name} {rabies}  {active} {0} {description} {Were: Rabies}}};
#list strategyList add {{{guild} {necromancer} {name} {fury}  {active} {0} {description} {Were: Fury}}};
#list strategyList add {{{guild} {necromancer} {name} {spirithowl}  {active} {0} {description} {Were: Spirithowl}}};
#list strategyList add {{{guild} {necromancer} {name} {bloodarc}  {active} {0} {description} {Lich: Bloodarc}}};
#list strategyList add {{{guild} {necromancer} {name} {bloodlet}  {active} {0} {description} {Vamp: Bloodlet}}};
#list strategyList add {{{guild} {necromancer} {name} {bloodfuse}  {active} {0} {description} {Vamp: Bloodfuse}}};
#list strategyList add {{{guild} {necromancer} {name} {illume}  {active} {0} {description} {Pure: Illume}}};
#list strategyList add {{{guild} {necromancer} {name} {skullfire}  {active} {0} {description} {Pure: Skullfire}}};
#list strategyList add {{{guild} {necromancer} {name} {corrode}  {active} {0} {description} {Pure: Corrode}}};
#list strategyList add {{{guild} {necromancer} {name} {psibleed}  {active} {0} {description} {Pure: Psibleed}}};
#list strategyList add {{{guild} {necromancer} {name} {diurnum}  {active} {0} {description} {Necro: Diurnum}}};
#list strategyList add {{{guild} {necromancer} {name} {nocturnum}  {active} {0} {description} {Necro: Nocturnum}}};
#list strategyList add {{{guild} {necromancer} {name} {iprime}  {active} {0} {description} {Invoke Prime}}};
#list strategyList add {{{guild} {necromancer} {name} {conjure}  {active} {0} {description} {Conjure Undead: Conjure and Nuke Them}}};
#list strategyList add {{{guild} {necromancer} {name} {gemino}  {active} {0} {description} {Preserve Gemino Corpses}}};
#list strategyList add {{{guild} {mage} {name} {anchor}  {active} {0} {description} {Anchor Yourself During Combat}}};
#list strategyList add {{{guild} {mage} {name} {slow}  {active} {0} {description} {Slow Mob}}};
#list strategyList add {{{guild} {mage} {name} {atrophy}  {active} {0} {description} {Atrophy Mob (Nukes Special)}}};
#list strategyList add {{{guild} {mage} {name} {edrain}  {active} {0} {description} {Edrain Mob (Removes 1 lvl from Mob)}}};
#list strategyList add {{{guild} {mage} {name} {spelltap}  {active} {0} {description} {Spelltap Toggling}}};
#list strategyList add {{{guild} {mage} {name} {feeblemind}  {active} {0} {description} {Feeblemind (-int)}}};
#list strategyList add {{{guild} {mage} {name} {phantasmal}  {active} {0} {description} {Phantasmal Killer}}};
#list strategyList add {{{guild} {mage} {name} {summon_haste}  {active} {0} {description} {Summoner: Haste Summons}}};
#list strategyList add {{{guild} {mage} {name} {summon_mf}  {active} {0} {description} {Summoner: Monstrous Fortitude}}};
#list strategyList add {{{guild} {mage} {name} {summon_tank}  {active} {0} {description} {Summoner: Rotate Summon Tanking}}};
#list strategyList add {{{guild} {mage} {name} {summon_cull}  {active} {0} {description} {Summoner: Cull Damaged Summons During MI}}};
#list strategyList add {{{guild} {mage} {name} {super_er}  {active} {0} {description} {Super: Explosive Release (-sat)}}};
#list strategyList add {{{guild} {mage} {name} {super_sub}  {active} {0} {description} {Super: Subjugate (-conc/rnd)}}};
#list strategyList add {{{guild} {mage} {name} {golem_defend}  {active} {0} {description} {Golem: Defend & Initiate Combat}}};
#list strategyList add {{{guild} {mage} {name} {golem_assist}  {active} {0} {description} {Golem: Assist}}};

#list strategyList indexate name;

#alias checkStrategy {
    #var strategy_found 0;
    #if {&strategyActive[] > 0} {
        #foreach $strategyActive[%*] item {
            #if {"$item[name]" == "%1"} {
                #var strategy_found 1;
                %2;
            };
        };
    };
    #NOP -- If there is a 3rd arguement, do this if the strategy isn't listed;
    #NOP -- This is useful for items like gemino preservations where you stil want to do;
    #NOP -- a different action if the strategy isn't active;
    #if {!$strategy_found && "%3" !== ""} {
        %3;
    };
};


#if {"$guild" == "mage"} {
    #var toggle_spelltap 1;

    #alias _strategy_mage {
        #if {!$idle_flag && $action_round < $mip[round]} {
            #if {$mob[slow] < 1} {
                checkStrategy {slow} {cast slow};
            };
            
            #if {$mob[edrain] < 1} {
                checkStrategy {edrain} {cast energy drain};
            };

            #if {$mob[atrophy] < 1} {
                checkStrategy {atrophy} {cast mystic atrophy};
            };

            #if {$mob[feeblemind] < 1} {
                checkStrategy {feeblemind} {cast feeblemind};
            };

            #if {$mob[phantasmal] < 1} {
                checkStrategy {phantasmal} {
                    cast phantasmal killer;
                    checkStrategy {summon_haste} {cast haste on something};
                    checkStrategy {summon_mf} {cast monstrous fortitude on something};
                };
            };
        };

        checkStrategy {anchor} {#if {!$my[anchor] && $mip[round] > 0} {cast anchor}};

        #if {$toggle_spelltap && $sp_percent > 70} {
            checkStrategy {spelltap} {#var toggle_spelltap 0;cast spell tap never}
        };

        #if {!$toggle_spelltap && $sp_percent < 30} {
            checkStrategy {spelltap} {#var toggle_spelltap 1;cast spell tap always}
        };

        checkStrategy {golem_assist} {#if {$my[golem][current] && !$my[golem][active]} {cast create golem}};
        checkStrategy {golem_defend} {#if {$my[golem][current] && !$my[golem][active]} {cast create golem}};

        #if {$sp_percent > 30} {
            #if {$summon_renew_mf} {cast monstrous fortitude on summons;#var summon_renew_mf 0;};
            #if {$summon_renew_haste} {cast haste on summons;#var summon_renew_haste 0};
        };

        checkStrategy {super_sub} {
            #NOP -- We'll use this when we don't have MI available since we don't really care about conc;
            #NOP -- when we have MI available;
            #if {$my[super][current] && !$my[immersion][count] && !$my[immersion][active] && $subjugate_toggle} {
                #var subjugate_toggle 0;
                cast subjugate;
                #delay 30 {#var subjugate_toggle 1};
            };
        };
    };
};


#NOP -- First round strategies;
#alias _strategy_necro_start {
    #if {$my[necromancer][maim]} {checkStrategy {maim} {#if {$my[necromancer][altered]} {maim} {qtrance alter hybrid/maim}};};

    checkStrategy {snare} {snare};
    checkStrategy {rabies} {rabies};
    checkStrategy {corrode} {corrode};
    checkStrategy {scythe} {scythe};
    checkStrategy {call} {call};
    checkStrategy {fury} {fury prime};
    checkStrategy {psibleed} {psibleed};
    checkStrategy {bloodlet} {#if {$my[necromancer][decanters][empty] > 0} {#if $vaf[numbers] {bloodlet $enemy[name_numbers]} {bloodlet $enemy[target]}};};
};

#alias _strategy_necro {
    #if {$mip[round] > 7 && $enemy[kill_rate_avg] >= 30 && $mip[round] < 15} {
        #if {$iprime_round && $my[necromancer][invoke-prime] > 0} {
            checkStrategy {iprime} {#var iprime_round 0;ip1;#delay 10 {#var iprime_round 1}};
        };

        #if {$my[necromancer][diurnum] > 0 || $my[necromancer][nocturnum] > 0} {
            checkStrategy {diurnum} {diurnum prime;#var my[necromancer][diurnum] 0;#var my[necromancer][nocturnum] 0;};
            checkStrategy {nocturnum} {nocturnum prime;#var my[necromancer][diurnum] 0;#var my[necromancer][nocturnum] 0;};
        };
        #if {$my[necromancer][bloodfuse] > 0 && $my[necromancer][decanters][powered] > 0} {
            checkStrategy {bloodfuse} {
                corpse_select;
                #if $mask[active] {
                    #send {qatrance cackle;qtrance smuggle remove potion/drink potion/preserve remains/bloodfuse corpse};
                    } {
                    #send {qtrance smuggle remove potion/drink potion/preserve remains/bloodfuse corpse};
                };
            };
        };

        #if {$my[necromancer][soulbind] && $my[necromancer][souls] >= 7 && $my[necromancer][glamors][current] >= 1} {
            checkStrategy {soulbind} {soulbind};
        };

        #if {$my[necromancer][bloodarc] > 0 && !$mob[bloodarc]} {
            checkStrategy {bloodarc} {bloodarc};
        };
        
        #if {$my[necromancer][harvest] > 0} {
            checkStrategy {harvest} {harvest};
        };

        #if {$my[necromancer][skullfire] > 0 && $my[necromancer][souls] >= 7 && $my[necromancer][glamors][current] >= 1} {
            checkStrategy {skullfire} {skullfire};
        };

        #if {$my[necromancer][conjure_undead] > 0} {
            #if {$my[gp1][current] < 50000} {
                checkStrategy {conjure} {nukeUndeadAbs};
            };
            #if {$my[gp1][current] > 50000 || $my[gp2][current] > 90} {
                checkStrategy {conjure} {nukeUndeadPres};
            };
        };
    };

    #if {$my[necromancer][spirit-howl] > 0} {
        checkStrategy {spirithowl} {spirithowl;#var my[necromancer][spirit-howl] 0;};
    };

    #if {$my[necromancer][glamors][current] >= 1 && $my[gp1][current] < 50000 && !$my[necromancer][glamors][illuming]} {
        checkStrategy {illume} {illume};
    };
    
};


#alias _strategy_bard {
    checkStrategy {assault} {
        #if {$corpses[total] > 20 && $my[gp1][current] > $karma_heal} {
            martial assault;
            martial assault;
            martial assault;
        };
    };

    #NOP -- Bard Song-Bot Strategies;
    #if {$mip[round] > 1} {
            
        #NOP --- If we're above the level we should use a corpse, remove the action to use the corpse;
        #if {$my[gp1][current] > $karma_use_corpse_between_songs && $actions_stacked} {remove_action corpse-between-songs;};

        #NOP --- The song bots shouldn't attempt to keep rolling if we're near using a corpse;
        checkStrategy {rainbow} {
            #if {$defs[hr] != 1} {#NOP} {#var defs[hr] 1};
            #if {$my[gp1][current] < $karma_use_corpse_between_songs && $my[song][rounds] > 1} {
                add_action {{{name} {corpse-between-songs} {action} {#var resume_song 0;corpse_select;#delay 2 {perform dirge;perform dirge;#var resume_song 1}}}};
            };

            #if {$my[gp1][current] > $karma_heal} {
                #if {$my[song][rounds] > 1} {#NOP;} {
                    #if {!$actions_stacked} {
                        #if $resume_song {perform rainbow of death}
                    } {
                        do_action
                    };
                };
                #if !$my[defs][fr] {cast focus the rainbow};
            };
        };

        checkStrategy {hammer} {
            #if {$defs[hr] != 1} {#NOP} {#var defs[hr] 1};
            #if {$my[gp1][current] < $karma_use_corpse_between_songs && $my[song][rounds] > 1} {
                add_action {{{name} {corpse-between-songs} {action} {#var resume_song 0;corpse_select;#delay 2 {perform dirge;perform dirge;#var resume_song 1}}}};
            };
            #if {$my[gp1][current] > $karma_heal} {
                #if {$my[song][rounds] > 1} {#NOP;} {
                    #if {$my[gp2][current] > 20} {
                        #if {$mip[round] > 10} {
                            #if {!$actions_stacked} {
                                #if {$resume_song} {
                                    perform hammer smashed face
                                };
                            } {
                                do_action;
                            };
                            
                        } {
                            #if !$my[defs][fr] {cast focus the rainbow};
                            #if {!$actions_stacked} {
                                #if {$resume_song} {
                                    perform rainbow of death;
                                };
                            } {
                                do_action;
                            };
                        };
                    } {
                        #if !$my[defs][fr] {cast focus the rainbow};
                        #if {!$actions_stacked} {
                            #if {$resume_song} {
                                perform rainbow of death;
                            };
                        } {
                            do_action;
                        };
                    };
                };
            };
        };
    };
};

#alias _strategy_heartbeat {
    #if {!$idle_flag && $action_round < $mip[round]} {

        #NOP -- Actions to perform the first round of combat;
        #if {$mip[round] == 1} {
            #if {"$guild" == "necromancer"} {_strategy_necro_start};
        };

        #NOP -- Actions to perform only in the beginning of the fight;
        #if {$mip[round] > 2 && $mip[round] < 6} {
            checkStrategy {epowers} {
                #if ${my[eternal][energy well]} {(energy well;#var mob[ewell] 1;#delay 180 {#var mob[ewell] 0};} {#if {${my[eternal][shred]} && !$mob[ewell]} {(shred;};};
                #if $my[eternal][fry] {(fry;};
            };

            checkStrategy {lucanus} {
                #if $lucanus_ring {push diamond};
                #if $lucanus_amulet {push symbol};
            };

            #if {$rolm[owl]} {checkStrategy {rolm} {touch owl rune}};
            #if {$rolm[raven] && $rolm[charges] > 50} {checkStrategy {rolm} {touch raven rune}};
            #if {"$guild" == "bard"} {
                checkStrategy {enrage} {#if !$mob[enrage] {enrage};};
                checkStrategy {cloud} {#if !$mob[noxious-cloud] {cast noxious cloud};};
                checkStrategy {vortex} {#if !$mob[lightning-vortex] {cast lightning vortex};};
            };
        };

        checkStrategy {bplate} {
            #class {eq_bloodplate} {size} {eq_bloodplate_loaded};
            #if $eq_bloodplate_loaded {#NOP} {#read ${cwd}/common/eq/bloodplate.tin};
        } {
            #class {eq_bloodplate} {size} {eq_bloodplate_loaded};
            #if $eq_bloodplate_loaded {#class eq_bloodplate kill;#var eq_bloodplate_loaded 0} {#NOP};
        };

        #NOP -- Actions to perform at any time in the fight;
        #if {"$guild" == "necromancer"} {_strategy_necro};
        #if {"$guild" == "bard"} {_strategy_bard};
        #if {"$guild" == "mage"} {_strategy_mage};
    };
};

#class common_strategy close;