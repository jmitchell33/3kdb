#CLASS draw {kill}
#CLASS draw {open}

#unvar draw[index];
#var draw[initiated] 0;
#var draw[index][caption] 1;
#var draw[chat][active] on;
#var draw[chat][size] .3;
#var draw[map][active] on;
#var draw[map][position] top;
#var draw[map][size] .3;
#var draw[hpbar][active] on;
#var draw[room][active] on;
#var draw[ticker][active] on;
#var draw[caption][active] on;
#var draw[mobile][active] 0;
#var draw[status][active] on;
#var draw[strategy][active] on;

#list bot_data clear;
#list caption_data clear;
#list strategy_data clear;

#NOP /* Pass 0-100 percentage number to split the current screen at. */
#alias {setsplit} {
    #math _perc {%1 * .01}; 
    #var map[widthperc] $_perc;
    #show \nSplit width percentage set to: %1\%;
    init_screen;
};

#NOP /* Calculate various area dimensions, called on start and SCREEN RESIZE */
#alias init_screen {
    #screen get rows screen[height];
    #screen get cols screen[width];

    #NOP -- If the screen width is less than 100, we can assume it's mobile so we'll draw differently;
    #NOP -- The map will reduce by 5 rows and the status window will be larger so items like;
    #NOP -- corpses don't get cutoff.;

    #if {$screen[width] < 100} {#var draw[mobile][active] 1;};

    #format chat[rows] {%d} {$screen[height] * $draw[chat][size]};
    #math chat[height] {$chat[rows] + 1};
    #math chat[rows] {$chat[rows] - 1};
    
    #NOP -- If map width isn't set, make it 33%;
    #if {$map[widthperc] > 0} {#NOP} {#var map[widthperc] .33};
    #format map[width] {%d} {$map[widthperc] * $screen[width]};
    #math map[left] {$screen[width] - $map[width]};

   
    #format map[height] {%d} {$draw[map][size] * $screen[height]};

    #if {"$draw[map][active]" == "on"} {
        #if {"$draw[map][position]" == "top"} {
            #var map[top] 2;
        } {
            #math map[top] {$chat[height] + 2};
        };
        #if {"$draw[room][active]" == "on"} {
            #math map[bottom] {$map[top] + $map[height] + 2};
        } {
            #math map[bottom] {$map[top] + $map[height]};
        };
        
    } {
        #var map[top] 0;
        #var map[bottom] 0;
    };

    
    #if {"$draw[hpbar][active]" == "on"} {
        #list {hpbar[prompt]} {size} {hpbar[height]};
    } {
        #var hpbar[height] 0;
    };

    #NOP -- Ticker goes right under the chatlog;
    #if {"$draw[chat][active]" == "on"} {
        #math chat[height] {$chat[rows] + 1};
        #math ticker[top] {$chat[height]};
        #math ticker[bottom] {$ticker[top] + @max{&ticker_data[];3} + 1};
        #if {"$draw[map][active]" == "on" && "$draw[map][position]" == "top"} {
            #math {chat[right]} {-$map[width]-1};
            #var ticker[right] $chat[right];
        } {
            #var chat[right] -1;
            #var ticker[right] -1;
        }
    } {
        #var ticker[top] 1;
        #math ticker[bottom] {$ticker[top] + @max{&ticker_data[];3} + 1};
        #var chat[height] 0
    };

    #NOP -- The caption goes right below the map;
    #if {"$draw[caption][active]" == "on"} {
        #math caption[top] {$map[bottom] + 2};
        #math caption[bottom] {-3 - $hpbar[height]};
        #var caption[left] $map[left];
    } {
        #var caption[top] 0;
        #var caption[bottom] 0;
    };

    #NOP -- Clear any previous drawings;
    #screen clear all;
    #buffer end;

    #NOP -- If there is the chat window, split the # of rows required to display it;
    #if {"$draw[chat][active]" == "on"} {
        #math split[top] {$chat[height]};
    } {
        #var split[top] 0;
    };

    #NOP -- If there is a ticker, then adjust the split;
    #if {"$draw[ticker][active]" == "on"} {#math split[top] {$split[top] + @max{&ticker_data[];3} + 1}};
    
    #math 	split[bottom]	{$hpbar[height] + 1};
    #var split[bottom] {@max{2;$split[bottom]}};
    
    #var    split[left]     0;
    #math 	split[right]	{$map[width] + 1};

    #NOP -- The map room details goes right inside the map area;
    #math draw_room[top] {$map[bottom]};
    #math draw_room[left] {$map[left] + 2};
    
    
    #split 	$split[top] $split[bottom] $split[left] $split[right];

    init_map;
    init_hpbar;
    #var draw[initiated] 1;
    draw_all;
};


#var mapFullScreen 0;
#alias {mapFull} {
    #if $mapFullScreen {
        #if {$tmpToggle} {qq;#var tmpToggle 0};
        #var mapFullScreen 0;
        #port zap port_mapFull;
    } {
        #NOP -- We will start a dummy server port with the map layout and send commands for seed data;
        #var mapFullScreen 1;
        #math map[fullLower] {$screen[height] - 2};
        #map get roomvnum map[full][startVnum];
        #port {init} {port_mapFull} {0};
        #{port_mapFull} {#var area $area;};
        #{port_mapFull} {#var map {${map}};};
        #{port_mapFull} {#read common/draw_mapFull.tin};
        #{port_mapFull} {#alias mapFull {#ses -;#zap port_mapFull;}};
        #ses {port_mapFull};
    };
};




#alias {draw_caption_all} {
    draw_caption_corpses;
    draw_caption_status;
    draw_caption_strategy;
};

#alias draw_all {
    #if {"$draw[hpbar][active]" == "on"} { draw_hpbar };
    #if {"$draw[chat][active]" == "on"} { draw_chat };
    #if {"$draw[caption][active]" == "on"} { draw_caption_all };
    #if {"$draw[room][active]" == "on"} { draw_room };
};

#NOP /* calculate hpbar size and draws initial line above hpbar area */
#alias {init_hpbar} {
    #if {"$draw[hpbar][active]" == "on"} {
        #math hpbar[top] {$screen[height] - $hpbar[height]};
        #math hpbar[bottom] {$hpbar[top] + $hpbar[height] - 1};
        #math hpbar[right] {$screen[width]}; 
    	#draw {line} -$hpbar[height]-2 1 -$hpbar[height]-2 -1;
    } {
        #var hpbar[height] 0;
    };
    tickhp;
};

#alias draw_hpbar {
    #loop 1 $hpbar[height] index {
        #var prompt $hpbar[prompt][+$index];
        #math hpbar_line {$hpbar[top] + $index - 1};
        #draw {<eeb>} {tile} $hpbar_line 1 $hpbar_line -1 ${prompt};
    };
};

#NOP -- CAPTION (Corpses, Eternal, Strategies, Bot Status, general data) --;
#alias draw_caption_corpses {
    #nop -- Clear any old drawings;
    #draw {<dda>} {tile} $caption[top] $caption[left]+1 $caption[bottom] -1 {};

    #if {&caption_data[]} {
        #list caption_data set $draw[index][caption] {$corpse_string \n $eternal_string};
    } {
        #list caption_data create {$corpse_string \n $eternal_string};
    };

    #if {$idle_sec > $deadmanIdleTimeout} {
        #draw calign grid table $caption[top] $caption[left]+1 $caption[bottom] -1 $caption_data[];
    } {
        #draw calign grid <ccc> tubed box $caption[top] $caption[left]+1 $caption[bottom] -1 $caption_data[];
    };
};

#NOP /* -- TICKER (Idle timer, Deadman, Current Round etc) -- */
#alias draw_ticker {
    #if {&ticker_data[]} {
        #list ticker_data set 1 {<fba>Idle: $idle_cap  <fba>Deadman: $deadManTimeLeft_cap};
    } {
        #list ticker_data create {<aed>Idle: $idle_cap  <fba>Deadman: $deadManTimeLeft_cap};
    };

    #if {&ticker_data[] == 1} {
        #list ticker_data add {$server_string};
    } {
        #list ticker_data set 2 {$server_string};
    };

    #if {&ticker_data[] == 2} {
        #list ticker_data add {$fight_string};
    } {
        #list ticker_data set 3 {$fight_string};
    };

    #if {$idle_sec > $deadmanIdleTimeout} {
        #draw calign grid red jeweled box $ticker[top] 1 $ticker[bottom] $ticker[right] $ticker_data[];
    } {
        #draw calign grid $theme[chatbox] jeweled box $ticker[top] 1 $ticker[bottom] $ticker[right] $ticker_data[];
    };
};


#NOP /* -- Bot status -- */
#alias draw_caption_status {
    #if {$draw[index][bot]} {
        #NOP -- If the stored index is greater than those existing, reset it;
        #if {$draw[index][bot] > &caption_data[]} {
            #math draw[index][bot] {&caption_data[] + 1};
            #list caption_data insert $draw[index][bot] {};
        };
    } {
        #math draw[index][bot] {&caption_data[] + 1};
        #list caption_data insert $draw[index][bot] {};
    };

    #if $bot[active] {
        #var bot_total_rooms &bot[steps][];
        #var bot_current_room $bot[step];

        #math bot_current_room {$bot_current_room - 1};
        #math bot_progress {100 * $bot_current_room / $bot_total_rooms};

        #format {bot[report-time]} {%T} {};
        #math bot[delta-time] {$bot[report-time] - $bot[start-time]};
        #if {$bot[delta-time] > 3600} {
            #math bot[delta-time] {$bot[delta-time] / 3600 * 1.00};
            #math bot[delta-rate] {$bot[stats][xp] / $bot[delta-time]};
            thousandsFormatNumber bot[delta-rate];
            #var xp_rate_str $bot[delta-rate];
            #var xp_time_str $bot[delta-time] Hrs;
        } {
            #math bot[delta-time] {$bot[delta-time] / 60 * 1.00};
            #math bot[delta-rate] {$bot[stats][xp] * 60 / $bot[delta-time]};
            thousandsFormatNumber bot[delta-rate];
            #var xp_rate_str $bot[delta-rate];
            #var xp_time_str $bot[delta-time] mins;
        };
        #var temp_xp $bot[stats][xp];
        thousandsFormatNumber temp_xp;

        #if $bot[paused] {
            #var bot_string {\n <088>Bot Status:<DAA><aaa> üñê <088>};
        } {
            #var bot_string {\n Bot Status:<ACA><fff> ‚ñ∂ <088>};
        };

        #if $bot[playercheck] {
            #cat bot_string {<ACA><fff> ‚úî <088>};
        } {
            #cat bot_string {<DAA><aaa> ‚úî <088>};
        };

        #cat bot_string {\n Path: $bot_current_room/$bot_total_rooms ($bot_progress% in $xp_time_str)};

        #cat bot_string {\n Kills: $bot[stats][mobs] XP: $temp_xp ($xp_rate_str/hr)};

    } {
        #var bot_string {\n <088>Bot: <fff>OFF<088>};
    };

    #list caption_data set $draw[index][bot] $bot_string;
};

#alias draw_caption_strategy {
    
    #if {$draw[index][strategy]} {
        #NOP -- If the stored index is greater than those existing, reset it;
        #if {$draw[index][strategy] > &caption_data[]} {
            #math draw[index][strategy] {&caption_data[] + 1};
            #list caption_data insert $draw[index][strategy] {};
        };
    } {
        #math draw[index][strategy] {&caption_data[] + 1};
        #list caption_data insert $draw[index][strategy] {};
    };

    #var strategy_string {\n <bef>Strategy:<088>};

    #foreach $strategyActive[%*] index {
        #format strat_name {%n} {$index[name]};
        #cat strategy_string { <afa>$strat_name<088>};
    };

    #list caption_data set $draw[index][strategy] $strategy_string;
};

#NOP /* -- MAP -- */
#alias init_map {
    #if {"$draw[map][active]" == "on"} {
        #draw {tile} $map[top]-1 -$map[width] $map[bottom]+1 -1 {};
        #map offset $map[top] -$map[width]+2 $map[bottom]-1 -2;
        #map flag vtmap on;
        #if {"$draw[room][active]" == "on"} {
            #draw <ccc> tubed box $map[top]-1 -$map[width] $map[bottom]+1 -1;
        } {
            #draw <ccc> tubed box $map[top]-1 -$map[width] $map[bottom] -1;
        };
    } {
        #map flag vtmap off
    };
};

#NOP /* -- ROOM -- */
#alias draw_room {
    #NOP Notes from mapper;
    #map get roomname roomMapNameStr;
    #map get roomnote roomMapNoteStr;

    #if $draw[initiated] {
        #nop -- Clear any old drawings;
        #draw {<dda>} {tile} $draw_room[top] $draw_room[left] $draw_room[top] -2 {};
        #draw {<dda>} {tile} $draw_room[top] $draw_room[left] $draw_room[top] -2 {Room Notes: ${roomMapNoteStr}};
    };
};

#alias draw-map-side {
    #var draw[map][position] side;
    init_screen;
    draw_all;
};

#alias draw-map-top {
    #var draw[map][position] top;
    init_screen;
    draw_all
};

#EVENT {SCREEN RESIZE} {#delay 3 {init_screen};};

#NOP /* kick off */;
#echo {<fff> CONNECTED TO 3KDB -- UPDATING SCREEN IN 3 seconds...};
#delay 4 {
    init_screen;
    draw_all;
};

#CLASS draw {close}
