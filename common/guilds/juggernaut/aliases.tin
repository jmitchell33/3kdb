#class {guild_aliases} {kill}
#class {guild_aliases} {open}

#alias jugg_report {
	#math mounts[percent] {100 * $mounts[no_lock] / $total_rounds};
	#math mounts[hits] {$total_rounds - $mounts[no_lock]};
	#math mounts[crit_percent] {100 * $mounts[crit] / $mounts[hits]};
	#format str_total_rounds {%g} {$total_rounds};
	#echo {<cbd>--------  <088>ðŸ¤–  <dfa>JUGG REPORT<088> (<ecb>$str_total_rounds rounds<088>)  ðŸ¤–  <cbd>--------<088>};
	#echo {<cbd>--------       Average Gxp/Rnd : $my[gxp][average]    <cbd>--------<088>};
	#echo {<cbd>--------          Best Gxp Rnd : $my[gxp][best]    <cbd>--------<088>};
	#echo {<cbd>--------          Total Gained : $my[gxp][total_gained]    <cbd>--------<088>};
	#echo {<cbd>--------                                   <cbd>--------<088>};
	#echo {<cbd>--------      <088>ðŸ”«  <dfa>MOUNT REPORT  <088>ðŸ”«         <cbd>--------<088>};
	#echo {<cbd>--------          <ddd>$mounts[hits] hits (${mounts[crit_percent]}% crits)<088>       <cbd>--------<088>};
	#echo {<cbd>--------  <ddd>$mounts[no_lock] failures to lock (${mounts[percent]}% of total)<088> <cbd>--------<088>};
};

#alias reset_tracking {
	#unvar my[gxp];
	#var total_rounds 0;
	#var mounts[no_lock] 0;
	#var mounts[crit] 0;
};

#action {^%sPoints Available:%*} {
	#format support_points {%d} %2;
	#math support_secondary_pts {$support_points - 99};
	#if $support_rebuild {
		#99 support upgrade $support_primary;
		#${support_secondary_pts} support upgrade $support_secondary;
		#var support_rebuild 0;
		support $support_mode;
	};
};

#alias support_defense {
	#var support_rebuild 1;
	#var support_primary armor;
	#var support_secondary repair;
	#var support_mode defend;
	support reset;
	support status;
};

#alias support_offense {
	#var support_rebuild 1;
	#var support_primary powerplant;
	#var support_secondary mount;
	#var support_mode assault fire;
	support reset;
	support status;
};

#alias {stimheal} {
	#if {$corpses[inventory] > 10} {
		#math {corpses[inventory]} {$corpses[inventory] - 1}
	}; #elseif {$corpses[truck] > 0} {
		#send !get corpse from cl;
		#math {corpses[truck]} {$corpses[truck] -1}
	}; #elseif {$corpses[cooler] > 0} {
		#send !uncooler corpse
	}; #else {
		#if {$bot[active]} {
			.stop;
		};
		#bell
	};
	#send !fdeener
};

#NOP -- Alias to donate airdrops to needy friends;
#alias donateSupport {
    #list donateSupportList clear;
    #action {<<<<<<<<<<<<<<<<<<<<<<<<<<<< Juggernauts On-Line >>>>>>>>>>>>>>>>>>>>>>>>>>>>>} {
        #action {%w%s %* %d/%d %s %d/%d %s %d% %*} {
            #format tempStr {%l} {%%%1};
            #format tempNum {%d} {%%%10};
            #list donateSupportList add {{{player} {$tempStr} {stim} {$tempNum}}};
        } {1};
        #NOP -- Reverse the list for small juggs first, then filter those less than 100 stim and donate to them;
        #delay 2 {
            #list donateSupportList reverse;
            #list donateSupportList indexate stim;
            #list donateSupportList refine {&0 < 100};
			#var tmpTimer 1;
			#var tmpInterval 2;
            #foreach $donateSupportList[%*] index {
				#if {$my[clan] > 0} {
					#math tmpTimer {$tmpTimer * $tmpInterval};
					#delay $tmpTimer {airdrop $index[player]};
					#math tmpTimer {$tmpTimer + 1};
				};
            };
        };
    } {1};
    #line oneshot #action {==============================================================================} {
        #unaction {<<<<<<<<<<<<<<<<<<<<<<<<<<<< Juggernauts On-Line >>>>>>>>>>>>>>>>>>>>>>>>>>>>>};
        #unaction {%w%s %* %d/%d %s %d/%d %s %d% %*};
    };
    #send {!juggs2};
};


#NOP Fire all nukes at current stepper mob or current enemy;
#alias ff {fire $my[nukes]};

#class {guild_aliases} {close}