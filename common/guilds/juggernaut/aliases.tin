#class {guild_aliases} {kill}
#class {guild_aliases} {open}

#NOP -- jugger report;
#alias jugg_report {
	#math mounts[percent] {100 * $mounts[no_lock] / $total_rounds};
	#math mounts[hits] {$total_rounds - $mounts[no_lock]};
	#math mounts[crit_percent] {100.00 * $mounts[crit] / $mounts[hits]};
	#format str_total_rounds {%g} {$total_rounds};
	#echo {<cbd>--------  <088>ðŸ¤–  <dfa>JUGG REPORT<088> (<ecb>$str_total_rounds rounds<088>)  ðŸ¤–  <cbd>--------<088>};
	#echo {<cbd>--------       Average Gxp/Rnd : $my[gxp][average]    <cbd>--------<088>};
	#echo {<cbd>--------          Best Gxp Rnd : $my[gxp][best]    <cbd>--------<088>};
	#echo {<cbd>--------          Total Gained : $my[gxp][total_gained]    <cbd>--------<088>};
	#echo {<cbd>--------                                   <cbd>--------<088>};
	#echo {<cbd>--------      <088>ðŸ”«  <dfa>MOUNT REPORT  <088>ðŸ”«         <cbd>--------<088>};
	#echo {<cbd>--------          <ddd>$mounts[hits] hits (${mounts[crit_percent]}% crits)<088>       <cbd>--------<088>};
	#echo {<cbd>--------  <ddd>$mounts[no_lock] failures to lock (${mounts[percent]}% of total)<088> <cbd>--------<088>};
};

#NOP -- reset jugger report;
#alias reset_tracking {
	#unvar my[gxp];
	#var total_rounds 0;
	#var mounts[no_lock] 0;
	#var mounts[crit] 0;
};

reset_tracking;

#alias support_defense {
	#var support_rebuild 1;
	#var support_primary armor;
	#var support_secondary repair;
	#var support_mode defend;
	support reset;
	support status;
};

#alias support_offense {
	#var support_rebuild 1;
	#var support_primary powerplant;
	#var support_secondary mount;
	#var support_mode assault fire;
	support reset;
	support status;
};

#NOP -- check top juggernauts in various catagories;
#alias {tj} {
	#switch {"%0"} {
		#case {"age"} {topjuggs age};
		#case {"bdamage"} {topjuggs bdamage};
		#case {"bkill"} {topjuggs bkill};
		#case {"cage"} {topjuggs cage};
		#case {"damage"} {topjuggs damage};
		#case {"gxp"} {topjuggs gxp};
		#case {"jkills"} {topjuggs jkills};
		#case {"recruits"} {topjuggs recruits};
		#case {""}   {#echo {<efb>==========<088> <faa>NO OPTION PROVIDED<088> <efb>==========<088>}};
		#default 	 {topjuggs %0};
	};
};

#NOP -- cdefend player or entire party;
#alias {cdef} {
	#switch {"%0"} {
		#case {"party"} {cdefend party};
		#case {"show"} {cdefend show};
		#case {"clear"} {cdefend clear};
		#case {""}   {#echo {<efb>==========<088> <faa>NO PLAYER OR OPTION PROVIDED<088> <efb>==========<088>}};
		#default 	 {cdefend %0};
	};
};

#NOP -- cycle through coffin/freezer/cooler for a corpse to heal stim otherwise will pause stepper if no corpses;
#alias {stimheal2} {
	#if {$corpses[coffin] > 0} {
		#send !unwrap 1;
	}; #elseif {$corpses[freezer] > 0} {
		#send !deslab;
	}; #elseif {$corpses[cooler] > 0} {
		#send !uncooler corpse;
	}; #else {
		#if {$bot[active]} {
			.pause;
			#echo {<ccf>----<088> <fff>OUT OF CORPSES<088><faa>!!!!<088> <ccf>----<088>};
		};
	};
	#send !fdeener
};

#NOP -- cycle through coffin/freezer/cooler for a corpse to heal stim (general use);
#alias {stimheal1} {
	#if {$corpses[coffin] > 0} {
		#send !unwrap 1;
	}; #elseif {$corpses[freezer] > 0} {
		#send !deslab;
	}; #elseif {$corpses[cooler] > 0} {
		#send !uncooler corpse;
	}; #else {
		#echo {<ccf>----<088> <fff>OUT OF CORPSES<088><faa>!!!!<088> <ccf>----<088>};
	};
	#send !fdeener
};

#NOP -- Alias to donate airdrops to needy friends
#alias donateSupport {
	#var supportType %0;
	#if {"%0" = ""} {#var supportType airdrop};
	#class supportDonate open;
    #list donateSupportList clear;
    #action {<<<<<<<<<<<<<<<<<<<<<<<<<<<< Juggernauts On-Line >>>>>>>>>>>>>>>>>>>>>>>>>>>>>} {
        #action {%w%s %* %d/%d %s %d/%d %s %d% %*} {
			#format tempStr {%l} {%%%1};
            #format tempNum {%d} {%%%10};
			#if {"$tempStr" != "$user"} {
				#list donateSupportList add {{{player} {$tempStr} {stim} {$tempNum}}}
			};
        } {1};
        #NOP -- Reverse the list for small juggs first, then filter those less than 115 stim (this is overmax max) and donate to them;
        #delay 2 {
            #list donateSupportList reverse;
            #list donateSupportList indexate stim;
            #list donateSupportList refine {&0 < 115};
			#var delayTicker 1;
            #foreach $donateSupportList[%*] index {
				#if {$my[clan] > 1} {
					#if {$delayTicker == 1} {
						$supportType $index[player]
					};
					#if {$delayTicker == 2} {
						#delay 2 {$supportType $index[player]};
					};
					#if {$delayTicker == 3} {
						#delay 4 {$supportType $index[player]}
					};
					#if {$delayTicker == 4} {
						#delay 6 {$supportType $index[player]}
					};
					#math delayTicker {$delayTicker + 1};
				};
            };
        };
    } {1};
	#send {!juggs2};
	#class supportDonate close;
	#delay 10 {#class supportDonate kill}
};


#NOP Fire all nukes at current stepper mob or current enemy;
#alias ff {fire $my[nukes]};

#NOP -- jugger support mech;
#alias {su1} {
    #var dismiss_support 0;
    dismiss;
    support summon;
    hp;
    #delay 4 {#var dismiss_support 1;support defend;hp}
};

#alias {su2} {
    support assault fire;
    defend mech;
    hp
};

#alias {su3} {
	support assault electric;
	defend mech;
	hp
};

#alias {summonmech} {
    support summon;
    #delay 4 {support assault fire;hp}
};

#alias {sd} {
    support defend
};

#class {guild_aliases} {close}