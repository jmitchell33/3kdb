#class guild_hpbar kill;
#class guild_hpbar open;

#NOP -- Psicorps hpbar with all options below;
#alias setup_3kdb_hpbar {
    #send {pset custom_hp HP: &$HP$&/&$MHP$& SP: &$SP$&/&$MSP$& PE: &$PE$&/&$MPE$& ST: &$ST$&/&$MST$& EC: &$EC$& AAT: &$AAT$& Gold: &$AU$& &$NL$&POW: &$AS$&};
    #send {pset active_brief 0};
};

#action {^HP: %d/%d SP: %d/%d PE: %d/%d ST: %d/%d EC: %d AAT: %* Gold: %d} {
    #if $gags[hpbar] {
        #line gag;
    };
    #VAR {my[hp][current]} {%1};
    #VAR {my[hp][max]} {%2};
    #math my[hp][percent] {1.00 * $my[hp][current] / $my[hp][max]};
    
    #VAR {my[sp][current]} {%3};
    #VAR {my[sp][max]} {%4};
    #math my[sp][percent] {1.00 * $my[sp][current] / $my[sp][max]};
    
    #VAR {my[gp1][current]} {%5};
    #VAR {my[gp1][max]} {%6};
    #math my[gp1][percent] {1.00 * $my[gp1][current] / $my[gp1][max]};
    
    #VAR {my[gp2][current]} {%7};
    #VAR {my[gp2][max]} {%8};
    #math my[gp2][percent] {1.00 * $my[gp2][current] / $my[gp2][max]};

    #var my[aa] %10;

    #line oneshot #action {^POW: $} {
        #if $gags[hpbar] {#line gag;};
        #NOP -- If you just see a POW, there are no powers online;
        #var powers_string <ebc>NONE<088>;
        #var my[powers] {}; 
    };
    
    #line oneshot #action {^POW: [[ %* ]]$} {
        #NOP -- Unaction the last power check _use_power in heartbeat.tin so we're only notified on a new round;
        #unaction {{You must wait %d round%w before you can use this power again.|You may only use one power per round.}};
        #if $gags[hpbar] {
            #line gag;
        };
        #if {"%%1" == ""} {
            #NOP -- If you just see a POW, there are no powers online;
            #var powers_string <ebc>NONE<088>;
            #var my[powers] {};
        } {
            #var powers %%1;
            _hpbar_handle_powers {$powers};
        };
    };
} {2};

#alias {_hpbar_handle_powers} {
    #NOP -- Move hpbar handler here and add support if it multi-lines;
    #NOP -- String for HPBAR;
    #var powers_string %0;
    #var powers %0;

    #local key_index 1;

    #NOP -- Replacements;
    #replace powers_string {ab: %*} {ab};
    #replace powers_string {: %d} { };
    #replace powers_string {  } { };

    #var powers_keys $powers_string;

    #format powers_keys {%p} {$powers_keys};
    #list powers_keys explode { };

    #NOP -- Remove powers that are no longer on the powers list;
    #foreach *my[powers][] tmpKey {
        #regex $powers {%i${tmpKey}} {#NOP} {
            #unvar my[powers][$tmpKey];
        };
    };

    #NOP -- Add new powers or update time on existing ones;
    #loop 1 &powers_keys[] key_index {
        #regex $powers {$powers_keys[$key_index]: %d} {
            #var my[powers][$powers_keys[$key_index]][active] 1;
            #var my[powers][$powers_keys[$key_index]][time] &1;
        };
    };

    #NOP -- Get the active adapt body type if available;
    #regex $powers {ab: %dJag} {#var current_adapt_body edged};
    #regex $powers {ab: %dSmo} {#var current_adapt_body blunt};
    #regex $powers {ab: %dBur} {#var current_adapt_body fire};
    #regex $powers {ab: %dFri} {#var current_adapt_body ice};
    #regex $powers {ab: %dMel} {#var current_adapt_body acid};
    #regex $powers {ab: %dEne} {#var current_adapt_body electric};
    #regex $powers {ab: %dMen} {#var current_adapt_body mind};
    #regex $powers {ab: %dMag} {#var current_adapt_body energy};
    #regex $powers {ab: %dPut} {#var current_adapt_body poison};
    #regex $powers {ab: %dGlo} {#var current_adapt_body radiation};

    #format _adapt_body_short {%.1s} {$current_adapt_body};
    #replace powers_string {ab} {ab<dfc>($_adapt_body_short)<088>};
};

#class guild_hpbar close;