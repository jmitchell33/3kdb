#class {guild_heartbeat} {kill}
#class {guild_heartbeat} {open}

#var found_chain 0;
#var _adapt_body edged;
#var current_adapt_body none;
#var hbp 0; /* has a heartbeat power been used this heartbeat */
#var power_override none; /* if not equal to "none", uses this power immediately once */
#var _DEBUG_HB 0;


#NOP -- Body Adjustment action thresholds as a percent of total HP;
#var {hp_heal_threshold_body_adjustment} {.70};
#var {hp_heal_threshold_chain_body_adjustment} {.50};
#var {hp_heal_threshold_chain_stamina_threshold} {.20};

#NOP -- Body Fuel Action Thresholds;
#NOP -- This means spend a max of x% of your HPs for bodyfuel;
#var {max_hp_to_spend_ratio} {0.20};
#var {bfuel_min_psi_missing} {100};

#NOP -- Guild Healing Ratio for Convert (SP -> Psi) and Bodyfuel (HP -> Psi);
#var {sp_to_psi_ratio} {0.2};
#var {hp_to_psi_ratio} {0.36};


#NOP -- Power helpers;
#alias {_guild_heartbeat} {
	#var hbp 0;

	#if {"$power_override" != "none"} {
		@use_power{$power_override};
		#var power_override none;
	};

	#NOP -- Use the best Body Adjustment you have inserted and use chain if inserted/necessary;
	#list gs_powers FIND {Chain} {found_chain};
	#list gs_powers FIND {Lesser Body Adjustment} {found_lba};
	#list gs_powers FIND {Body Adjustment} {found_ba};
	#list gs_powers FIND {Greater Body Adjustment} {found_gba};

	#if $found_lba {#var ba_use lesser body adjustment};
	#if $found_ba {#var ba_use body adjustment};
	#if $found_gba {#var ba_use greater body adjustment};
	
	#NOP -- Calculate HP/SP/GP Metrics and Percentages;
	#math {psi_missing} {$my[gp1][max] - $my[gp1][current]};

	#NOP -- Determine if you use use chain or just body adjustment;
	#NOP -- Chain will be used if it is loaded and if you take a bad round;
	#math {should_use_chain_body_adjustment} {$my[hp][percent] <= $hp_heal_threshold_chain_body_adjustment && $my[gp2][percent] >= $hp_heal_threshold_chain_stamina_threshold && $found_chain};
	#math {should_use_body_adjustment} {$my[hp][percent] <= $hp_heal_threshold_body_adjustment};

	#if {$should_use_chain_body_adjustment} {
		checkStrategy {body_adj} {@use_power{chain $ba_use, $ba_use}};
	};
	#elseif {$should_use_body_adjustment} {
		checkStrategy {body_adj} {@use_power{$ba_use}};
	};
	
	#NOP -- Check which Animal Affinity to be running;
	checkStrategy {bear} {#regex {$my[aa]} {bear} {#NOP} {@check_power{AA;animal affinity bear}}};
	checkStrategy {cat} {#regex {$my[aa]} {cat} {#NOP} {@check_power{AA;animal affinity cat}}};
	checkStrategy {owl} {#regex {$my[aa]} {owl} {#NOP} {@check_power{AA;animal affinity owl}}};
	checkStrategy {fox} {#regex {$my[aa]} {fox} {#NOP} {@check_power{AA;animal affinity fox}}};
	checkStrategy {bull} {#regex {$my[aa]} {bull} {#NOP} {@check_power{AA;animal affinity bull}}};
	checkStrategy {eagle} {#regex {$my[aa]} {eagle} {#NOP} {@check_power{AA;animal affinity eagle}}};


	#NOP -- Defense;
	@check_adapt_body{};
	@check_power{Bf;biofeedback};
	@check_power{Cp;combat precognition};
	@check_power{D;dodge};
	@check_power{Eb;energy barrier};
	@check_power{Ib;inertial barrier};
	@check_power{IB;improved biofeedback};
	@check_power{Iv;improved verve};
	@check_power{IV;improved valor};
	@check_power{Vg;vigor};
	@check_power{Vr;valor};
	@check_power{Vv;verve};
	@check_power{Di;displacement};

	#NOP -- Offense;
  
	@check_power{Bo;bolt};
	@check_power{Tl;talons};
	@check_power{CP;combat prescience};
	@check_power{E;expertise};
	@check_power{Ij;iron jaw};
	@check_power{Sj;steel jaw};

	#NOP -- Targeted powers;

	@check_power{Ac2;astral construct 2};
	@check_power{Ac3;astral construct 3};
	@check_power{Ac4;astral construct 4};
	@check_power{Ac5;astral construct 5};
	@check_power{bc;biocurrent};
	@check_power{BC;greater biocurrent};
	@check_power{Cg;conductive grasp};

  	#NOP --- Demoralize, Recall Pain & Recall Agony;
	
	#if {!$hbp} {
		#list gs_powers FIND {Demoralize} {found_dm};
		#if {$found_dm && !$mob[demoralize] && $incombat} {
			checkStrategy {demoralize} {@use_power{demoralize}};
		};
	};

	#if {!$hbp} {
		#if {$my[gp1][percent] > 80.0} {
			#if {$rpain_cnt == 0} {
				checkStrategy {rPain} {@use_power{recall pain}};
				#math {rpain_cnt} {$rpain_cnt + 1};
			};
			#else {#math {rpain_cnt} {$rpain_cnt - 1};};
		};
	};

	#if {!$hbp} {
		#if {$my[gp1][percent] > 80.0} {
		#if {$ragony_cnt == 0} {
			checkStrategy {rAgony} {@use_power{recall agony}};
			#math {ragony_cnt} {$ragony_cnt + 5};
		};
		#else {
			#math {ragony_cnt} {$ragony_cnt - 1};
		};
		};
	};

	#NOP -- GP1 Healing and Decision Tree to use Convert or Body Fuel;
	#NOP -- If you've yet to use a power this round, we'll use body fuel to replenish psi or convert;

	#if {!$hbp} {
		#NOP -- If you dont have biofuel, only convert is available;
		#NOP -- If convert and bioful strategies are both enabled, we will use convert if available to save HPs;
		
		#NOP -- Convert calcs;
		#if {$my[sp][percent] > 0.99 && $psi_missing >= $my[sp][max] * $sp_to_psi_ratio} {
			checkStrategy {convert} {@use_power{convert}};
		};

		#if {$psi_missing > $bfuel_min_psi_missing} {
			#nop -- Body fuel calcs;
			#math {max_hp_to_spend} {$my[hp][max] * $max_hp_to_spend_ratio};
			#math {hp_to_spend} {$psi_missing / $hp_to_psi_ratio};
			#if {$hp_to_spend > $max_hp_to_spend} {
				#var {hp_to_spend} {$max_hp_to_spend};
			};

			#math {safe_hp_threshold} {1 - $max_hp_to_spend_ratio};
			#math {can_safely_use_body_fuel} {$my[hp][percent] >= $safe_hp_threshold};

			#if {$can_safely_use_body_fuel} {
				#format hp_to_spend {%d} $hp_to_spend;
				checkStrategy {bFuel} {@use_power{body fuel $hp_to_spend}};
			};
		};
	};
  gp_round_maintenance;
};


#NOP -- Functions to check and use powers;
#NOP -- %1 - power short name;
#NOP -- %2 - full power name;
#function {check_power} {
  #if {!$hbp} {
    #regex {$my[powers]} {%1} {
      #if {!$combat[%1] && $my[powers][%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off %1};
        %2 off;
        #return #nop;
      };
      #elseif {$my[powers_time][%1] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop
      };
    } {
      #if {$combat[%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};

#function {check_adapt_body} {
  #if {!$hbp} {
    #regex {$my[powers]} {ab} {
      #if {!$combat[ab] && $my[powers][ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off ab};
        adapt body off;
        #var {current_adapt_body} {none};
        #return #nop;
      };
      #elseif {$my[powers_time][ab] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing adapt body};
        @use_adapt_body{};
        #return #nop;
      };
      #elseif {"$current_adapt_body" != "$_adapt_body"} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] changing adapt body dmg type to $_adapt_body};
        @use_adapt_body{};
        #return #nop;
      };
      #else {
        #return #nop
      };
    } {
      #if {$combat[ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on adapt body};
        @use_adapt_body{};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};

#function {use_adapt_body} {
  @use_power{adapt body $_adapt_body};
  #act {confident that your body has adapted to be resistant} {
    #var {current_adapt_body} {$_adapt_body};
    #unact {confident that your body has adapted to be resistant};
  };
};

#function {use_power} {
  #var tmp_last_power_used %0;
  #act {{You must wait %d round%w before you can use this power again.|You may only use one power per round.}} {
	#show <069>==> Failed to use $tmp_last_power_used<900>;
  } {5};

  #NOP -- Check if you have enough PSI / Stamina to use the power;
  #NOP -- Check if you are in combat for powers that should only be used in combat;
  
  #NOP -- If we're using a power with parameters, like body fuel, update the power check name;
  #regex {%0} {body fuel %*} {#var tmp_last_power_used body fuel};

  #foreach $psi_powers[%*] power {
    #if {"$tmp_last_power_used" == "$power[power]"} {
      #if {$power[combat]} {
        #if {$mip[round] > 0 && !$hbp} {
          #NOP -- Only use the power if we have at least 10 rounds of maintenance cost;
          #var psi_maint 1;
          #var stam_maint 1;
          #if $power[psi_maint] {
            #math psi_maint {$power[psi_maint] * 10};
            #if {$my[gp1][current] <= $psi_maint} {#var psi_maint 0;};
          };
          #if $power[stam_maint] {
            #math stam_maint {$power[stam_maint] * 10};
            #if {$my[gp2][current] <= $stam_maint} {#var stam_maint 0;};
          };
          #if {$my[gp1][current] >= $power[psi] && $psi_maint} {
            #if {$my[gp2][current] >= $power[stam] && $stam_maint} {
              #var hbp 1;
              %0;
              #show <069>==> %0<900>;
              #return #nop;
            } {
              #if {$_DEBUG_HB} {#show [debug_heartbeat] <069>==> Not enough Stam to use %0<900>};
            };
          } {
            #if {$_DEBUG_HB} {#show [debug_heartbeat] <069>==> Not enough Psi to use %0<900>};
          };
        };
      };
    };
  };
  #return #nop;
};

#alias {gp_round_maintenance} {
	#NOP -- Regen rates are set in the chars/your-name.tin file;

	#var pe_per_round 0;
	#var stam_per_round 0;
	#var maintenance_check $powers_string;
	#replace maintenance_check { } {;};
	#list maintenance_check create $maintenance_check;
	#foreach $maintenance_check power {
		#list psi_powers indexate key;
		#list psi_powers find {$power} {power_index};
		#if {$power_index} {
			#math pe_per_round {$pe_per_round + $psi_powers[$power_index][psi_maint]};
			#math stam_per_round {$stam_per_round + $psi_powers[$power_index][stam_maint]};
		};
	};
	#math pe_burn_rate {$pe_regen - $pe_per_round};
	#math stam_burn_rate {$stam_regen - $stam_per_round};
	#if {$pe_burn_rate < 0} {
		#var pe_burn_string <dcc>=== PE $pe_burn_rate ($pe_per_round/rnd) =<088>;
	} {
		#var pe_burn_string <dfb>=== PE +$pe_burn_rate ($pe_per_round/rnd) =<088>;
	};

	#if {$stam_burn_rate < 0} {
		#var stam_burn_string <dcc>= Stam $stam_burn_rate ($stam_per_round/rnd) === <088>;
	} {
		#var stam_burn_string <dfb>= Stam +$stam_burn_rate ($stam_per_round/rnd) === <088>;
	};
	#var gp_round_maintenance_string ${pe_burn_string}${stam_burn_string};
};

#class {guild_heartbeat} {close}