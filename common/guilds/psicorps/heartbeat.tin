#class {guild_heartbeat} {kill}
#class {guild_heartbeat} {open}

#var use_body_fuel 0;
#var use_chain 0;
#var _adapt_body edged;
#var current_adapt_body none;
#var hbp 0; /* has a heartbeat power been used this heartbeat */
#var power_override none; /* if not equal to "none", uses this power immediately once */
#var _DEBUG_HB 0;

#NOP -- Power helpers;


#alias {gp_round_maintenance} {
  #var pe_per_round 0;
  #var stam_per_round 0;
  #var maintenance_check $powers_string;
  #replace maintenance_check { } {;};
  #list maintenance_check create $maintenance_check;
  #foreach $maintenance_check power {
    #list psi_powers indexate key;
    #list psi_powers find {$power} {power_index};
    #if {$power_index} {
      #math pe_per_round {$pe_per_round + $psi_powers[$power_index][psi_maint]};
      #math stam_per_round {$stam_per_round + $psi_powers[$power_index][stam_maint]};
    };
  };
  #math pe_burn_rate {$pe_regen - $pe_per_round};
  #math stam_burn_rate {$stam_regen - $stam_per_round};
  #if {$pe_burn_rate < 0} {
    #var pe_burn_string <dcc>=== PE $pe_burn_rate ($pe_per_round/rnd) =<088>;
  } {
    #var pe_burn_string <dfb>=== PE +$pe_burn_rate ($pe_per_round/rnd) =<088>;
  };

  #if {$stam_burn_rate < 0} {
    #var stam_burn_string <dcc>= Stam $stam_burn_rate ($stam_per_round/rnd) === <088>;
  } {
    #var stam_burn_string <dfb>= Stam +$stam_burn_rate ($stam_per_round/rnd) === <088>;
  };
  #var gp_round_maintenance_string ${pe_burn_string}${stam_burn_string};
};

/* 
 %1 - power short name
 %2 - full power name
*/
#function {check_power} {
  #if {!$hbp} {
    #regex {$my[powers]} {%1} {
      #if {!$combat[%1] && $my[powers][%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off %1};
        %2 off;
        #return #nop;
      };
      #elseif {$my[powers_time][%1] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop
      };
    } {
      #if {$combat[%1]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on %2};
        @use_power{%2};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};

#function {check_adapt_body} {
  #if {!$hbp} {
    #regex {$my[powers]} {ab} {
      #if {!$combat[ab] && $my[powers][ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning off ab};
        adapt body off;
        #var {current_adapt_body} {none};
        #return #nop;
      };
      #elseif {$my[powers_time][ab] < 10} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] refreshing adapt body};
        @use_adapt_body{};
        #return #nop;
      };
      #elseif {"$current_adapt_body" != "$_adapt_body"} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] changing adapt body dmg type to $_adapt_body};
        @use_adapt_body{};
        #return #nop;
      };
      #else {
        #return #nop
      };
    } {
      #if {$combat[ab]} {
        #if {$_DEBUG_HB} {#show [debug_heartbeat] turning on adapt body};
        @use_adapt_body{};
        #return #nop;
      };
      #else {
        #return #nop;
      };
    };
  };
  #else {
    #return #nop;
  };
  #return #nop;
};

#function {use_adapt_body} {
  @use_power{adapt body $_adapt_body};
  #act {confident that your body has adapted to be resistant} {
    #var {current_adapt_body} {$_adapt_body};
    #unact {confident that your body has adapted to be resistant};
  };
};

#function {use_power} {
  #var tmp_last_power_used %0;
  #act {{You must wait %d round%w before you can use this power again.|You may only use one power per round.}} {
    #show <069>==> Failed to use $tmp_last_power_used<900>;
  } {5};
  #NOP -- Check if you have enough PSI / Stamina to use the power;
  #NOP -- Check if you are in combat for powers that should only be used in combat;
  #foreach $psi_powers[%*] power {
    #if {"%0" == "$power[power]"} {
      #if {$power[combat]} {
        #if {$mip[round] > 0 && !$hbp} {
          #NOP -- Only use the power if we have at least 10 rounds of maintenance cost;
          #var psi_maint 1;
          #var stam_maint 1;
          #if $power[psi_maint] {
            #math psi_maint {$power[psi_maint] * 10};
            #if {$my[gp1][current] <= $psi_maint} {#var psi_maint 0;};
          };
          #if $power[stam_maint] {
            #math stam_maint {$power[stam_maint] * 10};
            #if {$my[gp2][current] <= $stam_maint} {#var stam_maint 0;};
          };
          #if {$my[gp1][current] >= $power[psi] && $psi_maint} {
            #if {$my[gp2][current] >= $power[stam] && $stam_maint} {
              #var hbp 1;
              %0;
              #show <069>==> %0<900>;
              #return #nop;
            } {
              #if {$_DEBUG_HB} {#show [debug_heartbeat] <069>==> Not enough Stam to use %0<900>};
            };
          } {
            #if {$_DEBUG_HB} {#show [debug_heartbeat] <069>==> Not enough Psi to use %0<900>};
          };
        };
      };
    };
  };
  #return #nop;
};

#NOP -- Heartbeat;

#act {^HP: %d/%d  SP: %d/%d  PE: %d/%d  ST: %d/%d} {
    #line gag;
    #var my[hp][current] %1;
    #var my[hp][max] %2;
    #var my[sp][current] %3;
    #var my[sp][max] %4;
    #var my[gp1][current] %5;
    #var my[gp1][max] %6;
    #var my[gp2][current] %7;
    #var my[gp2][max] %8;
    
    #if {$_DEBUG_HB} { 
      #SHOW [debug_heartbeat] HP: $my[hp][current]/$my[hp][max];
      #SHOW [debug_heartbeat] SP: $my[sp][current]/$my[sp][max];
      #SHOW [debug_heartbeat] GP1: $my[gp1][current]/$my[gp1][max];
      #SHOW [debug_heartbeat] GP2: $my[gp2][current]/$my[gp2][max];
    };
};

#act {^[[%*]]} {
    #line gag;
    #var powers %1;
    #NOP -- String for HPBAR;
    #var powers_string %1;
    #replace powers {:}{};
    #replace powers { }{;};
    #list powers create $powers;

    #var i 1;
    #list {powers} {size} {size};    

    #var my[powers] [];
    #var my[powers_time] [];
    #while {$i <= $size} {
        #math {time_index} {$i + 1};
        #list {powers} {get} {$i} {power};
        #list {powers} {get} {$time_index} {time};

        #NOP -- If the regex finds a number, the power has a duration.  If it doesn't, it's the next power in the list;
        #NOP -- Powers with a timer we use the timer, if not we make it an 11;

        #regex {$time} {%+d} {
            #var time &0;
            #if {$time > 0} {
                #math {i} {$i + 2};
            } {
                #var time 11;
                #math {i} {$i + 1};
            };
        } {
            #var time 11;
            #math {i} {$i + 1};
        };
        #var my[powers][$power] 1;
        #var my[powers_time][$power] $time;
    };
};

#alias {_guild_heartbeat} {
  #var hbp 0;

  #if {"$power_override" != "none"} {
    @use_power{$power_override};
    #var power_override none;
  };

  #nop -- Healing;

  #math {hp_percent} {$my[hp][current] / $my[hp][max] * 100.0};
  #math {stamina_percent} {$my[gp2][current] / $my[gp2][max] * 100.0};
  #var {hp_heal_threshold_body_adjustment} {85.0};
  #var {hp_heal_threshold_chain_body_adjustment} {70.0};
  #var {hp_heal_threshold_chain_stamina_threshold} {2.0};

  #math {should_use_chain_body_adjustment} {$hp_percent <= $hp_heal_threshold_chain_body_adjustment && $stamina_percent >= $hp_heal_threshold_chain_stamina_threshold && $use_chain};
  #math {should_use_body_adjustment} {$hp_percent <= $hp_heal_threshold_body_adjustment};

  #if {$should_use_chain_body_adjustment} {
    @use_power{chain body adjustment, body adjustment};
  };
  #elseif {$should_use_body_adjustment} {
    #list gs_powers FIND {Body Adjustment} {found_ba};
    #list gs_powers FIND {Greater Body Adjustment} {found_gba};
    #list gs_powers FIND {Lesser Body Adjustment} {found_lba};
    #if $found_ba {@use_power{body adjustment}};
    #if $found_gba {@use_power{greater body adjustment}};
    #if $found_lba {@use_power{lesser body adjustment}};
  };

  #nop -- Defense;

  @check_power{AA;animal affinity bull};
  @check_adapt_body{};
  @check_power{Bf;biofeedback};
  @check_power{Cp;combat precognition};
  @check_power{D;dodge};
  @check_power{Eb;energy barrier};
  @check_power{Ib;inertial barrier};
  @check_power{IB;improved biofeedback};
  @check_power{Iv;improved verve};
  @check_power{IV;improved valor};
  @check_power{Vg;vigor};
  @check_power{Vr;valor};
  @check_power{Vv;verve};
  @check_power{Di;displacement};

  #nop -- Offense;
  
  @check_power{Bo;bolt};
  @check_power{Tl;talons};
  @check_power{CP;combat prescience};
  @check_power{E;expertise};
  @check_power{Ij;iron jaw};
  @check_power{Sj;steel jaw};

  #nop -- Targeted powers;

  @check_power{Ac3;astral construct 3};
  @check_power{Ac4;astral construct 4};
  @check_power{Ac5;astral construct 5};
  @check_power{bc;biocurrent};
  @check_power{Cg;conductive grasp};

  #nop --- Recall pain;

  #if {$combat[rpain]} {
    #if {!$hbp} {
      #math {gp1_percent} {$my[gp1][current] / $my[gp1][max] * 100.0};
      #if {$gp1_percent > 80.0} {
        #if {$rpain_cnt == 0} {
          @use_power{recall pain};
          #math {rpain_cnt} {$rpain_cnt + 1};
        };
        #else {
          #math {rpain_cnt} {$rpain_cnt - 1};
        };
      };
    };
  };

  #if {$combat[ragony]} {
    #if {!$hbp} {
      #math {gp1_percent} {$my[gp1][current] / $my[gp1][max] * 100.0};
      #if {$gp1_percent > 80.0} {
        #if {$ragony_cnt == 0} {
          @use_power{recall agony};
          #math {ragony_cnt} {$ragony_cnt + 5};
        };
        #else {
          #math {ragony_cnt} {$ragony_cnt - 1};
        };
      };
    };
  };

  #nop -- Demoralize;
  #if {!$hbp} {
    #list gs_powers FIND {Demoralize} {found_dm};
    #if {$found_dm && !$mob[demoralize] && $mip[round] > 0} {
      @use_power{demoralize};
    };
  };

  #nop -- GP1 healing;

  #if {!$hbp} {
    #nop -- If you dont have biofuel, only convert is available;
    #var {sp_to_psi_ratio} {0.2};
    #var {hp_to_psi_ratio} {0.36};
    #var {max_hp_to_spend_ratio} {0.15};
    #if {$combat[Bfuel]} {
      #nop -- Convert calcs;
      #math {psi_missing} {$my[gp1][max] - $my[gp1][current]};
      
      #nop -- Body fuel calcs;
      #math {max_hp_to_spend} {$my[hp][max] * $max_hp_to_spend_ratio};
      #math {hp_to_spend} {$psi_missing / $hp_to_psi_ratio};
      #if {$hp_to_spend > $max_hp_to_spend} {
        #var {hp_to_spend} {$max_hp_to_spend};
      };

      #math {safe_hp_threshold} {1 - $max_hp_to_spend_ratio};
      #math {can_safely_use_body_fuel} {$my[hp][current] / $my[hp][max] >= $safe_hp_threshold};

      #nop -- Pick GP1 heal power;

      #if {$my[sp][current] / $my[sp][max] > 0.99 && $psi_missing >= $my[sp][max] * $sp_to_psi_ratio} {
        @use_power{convert};
      };
      #elseif {$can_safely_use_body_fuel && $use_body_fuel} {
        @use_power{body fuel $hp_to_spend};
      };
    } {
      #nop -- Convert calcs;
      #math {psi_missing} {$my[gp1][max] - $my[gp1][current]};

      #if {$my[sp][current] / $my[sp][max] > 0.99 && $psi_missing >= $my[sp][max] * $sp_to_psi_ratio} {
        @use_power{convert};
      };
    };
  };
  gp_round_maintenance;
};

#class {guild_heartbeat} {close}