#class {guild_heartbeat} {kill}
#class {guild_heartbeat} {open}

#var found_chain 0;
#var _adapt_body edged;
#var current_adapt_body none;
#var hbp 0; /* has a heartbeat power been used this heartbeat */
#var power_override none; /* if not equal to "none", uses this power immediately once */
#var _DEBUG_HB 0;


#NOP -- Body Adjustment action thresholds as a percent of total HP;
#var {hp_heal_threshold_body_adjustment} {.70};
#var {hp_heal_threshold_chain_body_adjustment} {.50};
#var {hp_heal_threshold_chain_stamina_threshold} {.20};

#NOP -- Body Fuel Action Thresholds;
#NOP -- This means spend a max of x% of your HPs for bodyfuel;
#var {max_hp_to_spend_ratio} {0.20};
#var {bfuel_min_psi_missing} {100};

#NOP -- Guild Healing Ratio for Convert (SP -> Psi) and Bodyfuel (HP -> Psi);
#var {sp_to_psi_ratio} {0.2};
#var {hp_to_psi_ratio} {0.36};

#NOP -- Minimum GP1 for recall pain;
#var my[psicorps][recall_pain_min_gp1] .5;


#NOP -- Alias to swap animal affinity;
#var aa_used 1;
#alias aa_swap {
	#if $aa_used {
		#if {$my[implants][AA][active]} {
			#if {"$my[aa]" != "%1"} {
				#var aa_used 0;
				actuate animal affinity off;
				usep {animal affinity %1};
				#delay 4 {#var aa_used 1};
			};
		};
	};
};

#NOP -- Power helpers;
#alias {_guild_heartbeat} {
	#var hbp 0;

	#if {"$power_override" != "none"} {
		_use_power $power_override;
		#var power_override none;
	};

	#NOP -- Use the best Body Adjustment you have inserted and use chain if inserted/necessary;
	#if $my[implants][chain][active] {#var found_chain 1};
	#if $my[implants][lba][active] {#var found_lba 1};
	#if $my[implants][ba][active] {#var found_ba 1};
	#if $my[implants][gba][active] {#var found_gba 1};

	#if $found_lba {#var ba_use lesser body adjustment};
	#if $found_ba {#var ba_use body adjustment};
	#if $found_gba {#var ba_use greater body adjustment};
	
	#NOP -- Calculate HP/SP/GP Metrics and Percentages;
	#math {psi_missing} {$my[gp1][max] - $my[gp1][current]};

	#NOP -- Determine if you use use chain or just body adjustment;
	#NOP -- Chain will be used if it is loaded and if you take a bad round;
	#math {should_use_chain_body_adjustment} {$my[hp][percent] <= $hp_heal_threshold_chain_body_adjustment && $my[gp2][percent] >= $hp_heal_threshold_chain_stamina_threshold && $found_chain};
	#math {should_use_body_adjustment} {$my[hp][percent] <= $hp_heal_threshold_body_adjustment};

	#if {$should_use_chain_body_adjustment} {
		checkStrategy {body_adj} {_use_power chain $ba_use, $ba_use};
	};
	#elseif {$should_use_body_adjustment} {
		checkStrategy {body_adj} {_use_power $ba_use};
	};
	
	#NOP -- Check which Animal Affinity to be running;
	#NOP -- Psicorps have a bug with animal affinity sticking to the hpbar even if it's off;
	#NOP -- We'll clear animal affinity if it's on the hpbar but not actually up;
	#if {"$my[aa]" != "(none)" && $my[implants][AA][active]} {
		#if {"$my[powers][AA]" == ""} {
			#delay aa_toggle {actuate animal affinity off} {4};
		} {
			#undelay aa_toggle;
		};
	};
	#var aa_active 0;
	checkStrategy {bear} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "bear"} {#NOP} {aa_swap bear}};
	checkStrategy {cat} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "cat"} {#NOP} {aa_swap cat}};
	checkStrategy {owl} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "owl"} {#NOP} {aa_swap owl}};
	checkStrategy {fox} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "fox"} {#NOP} {aa_swap fox}};
	checkStrategy {bull} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "bull"} {#NOP} {aa_swap bull}};
	checkStrategy {eagle} {#math aa_active {$aa_active + 1};#if {"$my[aa]" == "eagle"} {#NOP} {aa_swap eagle}};

	#if {$aa_active > 1} {
		#echo {<efb> !!! CALL THE <faa>ZOOKEEPER<efb> - THE ANIMALS ARE FIGHTING !!! <088>};
		#echo {<dfd>   (multiple animal affinity strategies are running) <088>};
	};


	#NOP -- Defense;
	_check_adapt_body;
	_check_power {Bf} {biofeedback};
	_check_power {Cp} {combat precognition};
	_check_power {D} {dodge};
	_check_power {Eb} {energy barrier};
	_check_power {Ib} {inertial barrier};
	_check_power {IB} {improved biofeedback};
	_check_power {Iv} {improved verve};
	_check_power {IV} {improved valor};
	_check_power {Vg} {vigor};
	_check_power {Vr} {valor};
	_check_power {Vv} {verve};
	_check_power {Di} {displacement};

	#NOP -- Offense;
  
	_check_power {Bo} {bolt};
	_check_power {Tl} {talons};
	_check_power {CP} {combat prescience};
	_check_power {E} {expertise};
	_check_power {Ij} {iron jaw};
	_check_power {Sj} {steel jaw};

	#NOP -- Targeted powers;

	_check_power {Ac2} {astral construct 2};
	_check_power {Ac3} {astral construct 3};
	_check_power {Ac4} {astral construct 4};
	_check_power {Ac5} {astral construct 5};
	_check_power {bc} {biocurrent};
	_check_power {BC} {greater biocurrent};
	_check_power {Cg} {conductive grasp};

  	#NOP --- Blur, Demoralize, Recall Pain & Recall Agony;

	#if {!$hbp} {
		#if {$my[implants][Bl][active] && $incombat} {
			#if {"$my[powers][Bl]" == ""} {
				checkStrategy {blur} {_use_power blur}
			};
		};
	};

	#if {!$hbp} {
		#if {$my[implants][dm][active] && !$mob[demoralize] && $incombat} {
			checkStrategy {demoralize} {_use_power demoralize};
		};
	};

	#if {!$hbp} {
		#if {$my[gp1][percent] > $my[psicorps][recall_pain_min_gp1] && $mip[round] > 3} {
			#if {$mob[recall_pain] == 0} {
				checkStrategy {rpain} {_use_power recall pain};
				checkStrategy {ragony} {_use_power recall agony};
				checkStrategy {rtorment} {_use_power recall torment};
			};
		};
	};


	#NOP -- GP1 Healing and Decision Tree to use Convert or Body Fuel;
	#NOP -- If you've yet to use a power this round, we'll use body fuel to replenish psi or convert;

	#if {!$hbp} {
		#NOP -- If you dont have biofuel, only convert is available;
		#NOP -- If convert and bioful strategies are both enabled, we will use convert if available to save HPs;
		
		#NOP -- Convert calcs;
		#if {$my[sp][percent] > 0.99 && $psi_missing >= $my[sp][max] * $sp_to_psi_ratio} {
			checkStrategy {convert} {_use_power convert};
		};

		#if {$psi_missing > $bfuel_min_psi_missing} {
			#nop -- Body fuel calcs;
			#math {max_hp_to_spend} {$my[hp][max] * $max_hp_to_spend_ratio};
			#math {hp_to_spend} {$psi_missing / $hp_to_psi_ratio};
			#if {$hp_to_spend > $max_hp_to_spend} {
				#var {hp_to_spend} {$max_hp_to_spend};
			};

			#math {safe_hp_threshold} {1 - $max_hp_to_spend_ratio};
			#math {can_safely_use_body_fuel} {$my[hp][percent] >= $safe_hp_threshold};

			#if {$can_safely_use_body_fuel} {
				#format hp_to_spend {%d} $hp_to_spend;
				checkStrategy {bfuel} {_use_power body fuel $hp_to_spend};
			};
		};
	};
  gp_round_maintenance;
};

#NOP -- Alias to check if the power is active;
#alias _check_powers_list {
	#var found_power 0;
	#format tmpLookup {%p} {%0};
	#foreach {*my[powers][]} {item} {
		#format tmpItem {%p} {$item};
		#if {"$tmpLookup" == "$tmpItem"} {
			#var found_power 1;
		};
	};
};

#NOP -- Alias to check and use powers;
#NOP -- %1 - power short name;
#NOP -- %2 - full power name;
#alias {_check_power} {
  #if {!$hbp} {
	_check_powers_list %1;
	#if $found_power {
      #if {!$my[implants][%1][active] && $my[powers][%1][active]} {
        #if {$_DEBUG_HB} {#echo {<dee>[debug_heartbeat] turning off %1<088>}};
        %2 off;
      };
      #elseif {$my[powers][%1][time] < 10} {
        #if {$_DEBUG_HB} {#echo {<dee>[debug_heartbeat] refreshing %2<088>}};
        _use_power %2;
      };
      #else {
        #NOP;
      };
    } {
      #if {$my[implants][%1][active]} {
        #if {$_DEBUG_HB} {#echo {<dee>[debug_heartbeat] turning on %2<088>}};
        _use_power %2;
      };
      #else {
        #NOP;
      };
    };
  };
  #else {
    #NOP;
  };
  #NOP;
};

#alias {_check_adapt_body} {
  #if {!$hbp} {
	_check_powers_list ab;
    #if $found_power {
      #if {!$my[implants][%1][active] && $my[powers][ab][active]} {
        #if {$_DEBUG_HB} {#echo {[debug_heartbeat] turning off ab}};
        adapt body off;
      };
      #elseif {$my[powers][ab][time] < 10} {
        #if {$_DEBUG_HB} {#echo {[debug_heartbeat] refreshing adapt body}};
        _use_adapt_body;
      };
      #elseif {"$current_adapt_body" != "$_adapt_body"} {
        #if {$_DEBUG_HB} {#echo {[debug_heartbeat] changing adapt body dmg type to $_adapt_body}};
        _use_adapt_body;
      };
      #else {
        #NOP;
      };
    } {
      #if {$my[implants][%1][active]} {
        #if {$_DEBUG_HB} {#echo {[debug_heartbeat] turning on adapt body}};
		#if {$_DEBUG_HB} {#echo {[debug_heartbeat] my powers are $my[powers]}};
        _use_adapt_body;
      };
      #else {
        #NOP;
      };
    };
  };
  #else {
    #NOP;
  };
  #NOP;
};

#alias {_use_adapt_body} {
  _use_power adapt body $_adapt_body;
  #act {confident that your body has adapted to be resistant} {
    #var {current_adapt_body} {$_adapt_body};
    #unact {confident that your body has adapted to be resistant};
  };
};

#alias {_use_power} {
	#if $my[dead] {#NOP} {
		#var tmp_last_power_used %0;
		#action {{You must wait %d round%w before you can use this power again.|You may only use one power per round.}} {
			#echo {<069>==> Failed to use $tmp_last_power_used<900>};
		} {2};

		#NOP -- Check if you have enough PSI / Stamina to use the power;
		#NOP -- Check if you are in combat for powers that should only be used in combat;
	
		#NOP -- If we're using a power with parameters, like body fuel, update the power check name;
		#regex {%0} {body fuel %*} {#var tmp_last_power_used body fuel};
		#regex {%0} {adapt body %*} {#var tmp_last_power_used adapt body};
		#regex {%0} {animal affinity %*} {#var tmp_last_power_used animal affinity};

		#foreach $psi_powers[%*] power {
			#if {"$tmp_last_power_used" == "$power[power]"} {
				#if {$power[combat]} {
					#if {$mip[round] > 0 && !$hbp} {
						#NOP -- Only use the power if we have at least 10 rounds of maintenance cost;
						#var psi_maint 1;
						#var stam_maint 1;
						#if $power[psi_maint] {
							#math psi_maint {$power[psi_maint] * 10};
							#if {$my[gp1][current] <= $psi_maint} {#var psi_maint 0;};
						};
						#if $power[stam_maint] {
							#math stam_maint {$power[stam_maint] * 10};
							#if {$my[gp2][current] <= $stam_maint} {#var stam_maint 0;};
						};
						#if {$my[gp1][current] >= $power[psi] && $psi_maint} {
							#if {$my[gp2][current] >= $power[stam] && $stam_maint} {
							#if {$_DEBUG_HB} {#echo {[debug_heartbeat] <069>==> Using %0<900>}};
							#var hbp 1;
							%0;
							
							#NOP -- last_psi_power is manually set in the hpbar file since there is a lag between the;
							#NOP -- power being used and the mud including it on the hpbar/MIP;
							#var last_psi_power_key $power[key];
							#echo {<069>==> %0<900>};
							} {
							#if {$_DEBUG_HB} {#echo {[debug_heartbeat] <069>==> Not enough Stam to use %0<900>}};
							};
						} {
							#if {$_DEBUG_HB} {#echo {[debug_heartbeat] <069>==> Not enough Psi to use %0<900>}};
						};
					};
				};
			};
		};
	};
};

#alias {gp_round_maintenance} {
	#NOP -- Regen rates are set in the chars/your-name.tin file;

	#var pe_per_round 0;
	#var stam_per_round 0;
	#var maintenance_check $powers_string;
	#replace maintenance_check { } {;};
	#list maintenance_check create $maintenance_check;
	#foreach $maintenance_check power {
		#list psi_powers indexate key;
		#list psi_powers find {$power} {power_index};
		#if {$power_index} {
			#math pe_per_round {$pe_per_round + $psi_powers[$power_index][psi_maint]};
			#math stam_per_round {$stam_per_round + $psi_powers[$power_index][stam_maint]};
		};
	};
	#math pe_burn_rate {$pe_regen - $pe_per_round};
	#math stam_burn_rate {$stam_regen - $stam_per_round};
	#if {$pe_burn_rate < 0} {
		#var pe_burn_string <dcc>=== PE $pe_burn_rate ($pe_per_round/rnd) =<088>;
	} {
		#var pe_burn_string <dfb>=== PE +$pe_burn_rate ($pe_per_round/rnd) =<088>;
	};

	#if {$stam_burn_rate < 0} {
		#var stam_burn_string <dcc>= Stam $stam_burn_rate ($stam_per_round/rnd) === <088>;
	} {
		#var stam_burn_string <dfb>= Stam +$stam_burn_rate ($stam_per_round/rnd) === <088>;
	};
	#var gp_round_maintenance_string ${pe_burn_string}${stam_burn_string};
};

#class {guild_heartbeat} {close}