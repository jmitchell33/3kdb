#class common_room kill;
#class common_room open;


#NOP -- Add anything to the familiar mix;
#action {^-M-_A tank named %*.} {#list room[familiars] add {A tank named %1}} {1};
#action {^-M-_%* Jugger Support Mech%*.} {#list room[familiars] add {%1 Jugger Support Mech}} {1};

#alias .clearRoomData {
    #list room[mobs] clear;
    #list room[familiars] clear;
    #list room[summons] clear;
    #list room[items] clear;
    #list room[players] clear;
    #list room[botmobs] clear;
    #var room[long]  ;
    #var room[updated] 0;

    #if $bot[active] {
        #var bot[foundmob] 0;
        #var bot[foundobject] 0;
        #var bot[foundplayer] 0;
        #var bot[aggro-mob] 0;
    };
};


#NOP -- Update if there is a player in the room not in friends list;
#act {{^-P-_(.*)}} {
    #local tmpPlayer {};
    #loop 1 &players[] tmpPlayer {
        #if {"%1" == "%*$players[$tmpPlayer]%*"} {
            #list room[players] add $players[$tmpPlayer];
        };
    };

    #if $bot[active] {
        #if $bot[playercheck] {
            #unvar item {};
            #var noPlayerCheck 1;
            #if {"$whitelist" !== ""} {
                #if {&whitelist[] > 0} {
                    #loop 1 &whitelist[] item {
                        #regex {"%1"} {"$whitelist[$item]"} {
                            #var noPlayerCheck 0;
                        };
                    };
                } {
                    #var bot[foundplayer] 1;
                };
            } {
                #var bot[foundplayer] 1;
            };
            #if $noPlayerCheck {#var bot[foundplayer] 1};
        };
    };
} {2};


#act {{^-R-_(.*)-R-_}} {
    .clearRoomData;
    #var room_short %%1;
    
    
    #line oneshot #action {^>$} {
        #var room[updated] 1;
        #if $bot[active] {
            #if $debug[bot] {#echo {Prompt reached, calling .determineBotAction}};
            .determineBotAction
        };
        #if $explore[updateDB] {
            #var explore[walk] 0;
            #format checkRoomLength {%L} {$room[long]};
            apiPostAll;
            #delay 2 {#var explore[walk] 1};
        };
    } {1};
} {2};

#action {^-D-_%*\n%a-D-_$} {
    #delay .1 {
        #unvar long;
        #format long1 {%p} {%1};
        #format long2 {%p} {%2};
        #var long {$long1 $long2};
        #replace long {\n} { };
        #var room[long] {${long}};
    };
} {2};


#act {^{-i-|-w-|-a-|-o-}%*.$} {
    #var item_number 1;
    #var item_long %2;
    #var item_long_full %0;

    #replace item_long {.} {};
    #replace item_long { \[%*\]} {};

    #regex {%2} {7B{[0-9]+}} {#var item_number &1;#replace item_long { \\x7B%*} {};};
    #regex {%2} {7B{[A-Za-z]+}} {#replace item_long { \\x7B%*} {};};

    #list room[items] add $item_long_full;

    #if {$bot[active] && !$bot[paused] && $bot[walk]} {
        #if {$collector[items]} {
            #foreach $item_grab_list[%*] item {
                #regexp {"$item_long"} {$item[long]} {
                    #$item_number get $item[target];
                    #if {"$guild" == "bard"} {
                        identify $item[target];
                    };
                    #if {"$guild" == "priest"} {
                        recognize $item[target];
                    };
                    #if {"$item[target]" == "bag"} {
                        #loop 2 20 i {put bag in bag $i};
                    };
                };
            };
        };
    };
} {2};

#function checkPeriod {
    #var result 0;
    #local tmpWord %0;
    #format revTmpWord {%p} {$tmpWord};
    #format revTmpWord {%r} {$tmpWord};
    #format tmpWord {%.1s} {$revTmpWord};
    #if {"$tmpWord" == "."} {#var result 1};
};

#NOP -- Clean up the mob long a bit;
#alias .mobNameClean {
    #var isPeriod 0;
    #var mob[long] {};
    #var mob[autoName] {};
    #var foundTimes 1;
    #var mob[long] %0;
    #regex {$mob[long]} {attacking you} {#var bot[aggro-mob] 1;#replace mob[long] { attacking%*} {}};
    #regex {$mob[long]} {7B{[0-9]+}} {#var foundTimes &1;#replace mob[long] { \\x7B%*} {};};
    #regex {$mob[long]} {7B{[A-Za-z]+}} {#replace mob[long] { \\x7B%*} {};};
    #format {mob[long]} {%p} {$mob[long]};

    #replace mob[long] { [scratched]%*} {};
    #replace mob[long] { [wounded]%*} {};
    #replace mob[long] { [dying]%*} {};
    #replace mob[long] { <%*>} {};

    #NOP -- If there is a period at the end, remove it;
    #var isPeriod @checkPeriod{$mob[long]};
    #format mobLength {%L} $mob[long];
    #if $isPeriod {
        #math mobLength {$mobLength - 1};
        #format mob[long] {%.${mobLength}s} {$mob[long]};
    };
    #var tmpMob $mob[long];

    #NOP -- Get rid of anything in brackets;
    #replace tmpMob { \[%*\]%*} {};
    #replace tmpMob { \(%*\)%*} {};
    #replace tmpMob { \\x7B%*\\x7D%*} {};

    #list tmpMob {explode} { };
    #format mob[autoName] {%l} $tmpMob[&tmpMob[]];
};

#act {^-M-_%*} {
    .mobNameClean %1;
    #var mobIndex 1;
    #var botTarget 0;

    #NOP -- Auto ask/solve/return missions;
    #regex {%1} {<?>} {mission ask};
    #regex {%1} {<!>} {mission return};
    #regex {%1} {<!.>} {mission return;mission ask};
    
    #NOP -- Mob health if it has not taken damage does not appear and is 100%;
    #var tmpHealth 100;
    #regex {$mob[long]} {(%d%)} {#var tmpHealth &1};

    #if $bot[active] {
        #foreach $bot[mobs][%*] botmob {
            #regexp {$mob[long]} {$botmob[long]} {
                #var bot[foundmob] 1;
                #var mob[target] $botmob[target];
                #var botTarget 1;
            };
        };
        #undelay {bot_kick};
        #undelay {bot_restart};
    } {
        #var mob[target] $mob[autoName];
    };

    #NOP -- Separate mage summons into their own group/exclude from room[mobs];
    #regex {$mob[long]} {%* [summons] (%d%)%*} {
        #var summonIndex 1;
        #if $debug[room] {#echo {<cfa>DEBUG ROOM: Summon found &0}};
        #format tmpSummonName {%p} {&0};
        #replace tmpSummonName { [summons]%*} {};
        #var summonTankIndex 1;
        
        #NOP -- We don't want to assign the Golem to tanking since it's damage drops if it's tanking;
        #var skipSummon 0;
        
        #if {$foundTimes == 1} {
            #if {&room[summons] > 0} {
                #var tmpFound 0;
                #foreach $room[summons][%*] tmpItem {
                    #if {"$tmpItem[name]" == "$tmpSummonName"} {
                        #math summonIndex {$tmpItem[index] + 1};
                    };
                };
                #list room[summons] add {{{name} {$tmpSummonName} {health} {&2} {index} {$summonIndex}}};
            };
        } {
            #loop 1 $foundTimes tmpIndex {
                #list room[summons] add {{{name} {$tmpSummonName} {health} {&2} {index} {$tmpIndex}}};
            };
        };

        #if $summonTankCheck {
            #regex {"$tmpSummonName"} {"%*Golem%*"} {#var skipSummon 1};
            #if !$skipSummon {
                #var summonTankIndex 1;
                #foreach $summonTankList[%*] item {
                    #if {"$item[name]" == "$tmpSummonName"} {#math summonTankIndex {$summonTankIndex + 1}};
                };
                #list summonTankList add {{{name} {$tmpSummonName} {health} {&2} {index} {$summonTankIndex}}};
            };
        };
    } {
        #NOP -- THIS SECTION HANDLES MOBS OTHER THAN MAGE SUMMONS;
        #if {$foundTimes == 1} {
            #if {&room[mobs] > 0} {
                #var tmpFound 0;
                #foreach $room[mobs][%*] tmpItem {
                    #if {"$tmpItem[name]" == "$mob[long]"} {
                        #math mobIndex {$tmpItem[index] + 1};
                    };
                };
                #list room[mobs] add {{{autoName} {$mob[autoName]} {name} {$mob[long]} {health} {$tmpHealth} {index} {$mobIndex} {botTarget} {$botTarget} {botName} {$mob[target]}}};
            };
        } {
            #loop 1 $foundTimes tmpIndex {
                #list room[mobs] add {{{autoName} {$mob[autoName]} {name} {$mob[long]} {health} {$tmpHealth} {index} {$tmpIndex} {botTarget} {$botTarget} {botName} {$mob[target]}}};
            };
        };
    };
} {2};

#class common_room close;