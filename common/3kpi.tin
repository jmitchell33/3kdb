#class 3kpi kill;
#class 3kpi open;

#NOP -- Helper functions for the 3kpi server/database;
#alias jsonFormatEternal {
    #var apiPayload "character" : "$user";
    #foreach $eternalList[%*] index {
        #if {"$index[cur_cd]" == "RDY"} {#var powerStatus "true"} {#var powerStatus "false"};
        #cat apiPayload { , "$index[key]" : $powerStatus};
    };
};

#alias jsonFormatRoom {
    #unvar apiPayLoad;
    #map get roomvnum roomID;
    #map get roomarea parent_area;
    #map get roomname room_short;
    #map get roomdesc room_long;
    #map get roomexits room_exits;
    #var parent_area @sanitizePayload{$parent_area};
    #var room_short @sanitizePayload{$room_short};
    #var room_long @sanitizePayload{$room_long};
    #var room_exits @sanitizePayload{$room_exits};
    #var apiPayload "roomID" : "$roomID", "parent_area" : "$parent_area", "room_short": "$room_short", "room_long" : "$room_long", "room_exits" : "$room_exits";
};

#NOP -- This is used by feeding the item short received in the room;
#alias jsonFormatRoomItem {
    #unvar apiPayLoad;
    #map get roomvnum roomID;
    #map get roomarea parent_area;
    #local parent_area @sanitizePayload{$parent_area};
    #local short @sanitizePayload{%0};
    #replace short {_w_} {};
    #replace short {_a_} {};
    #replace short {_i_} {};
    #replace short {_o_} {};
    #format itemType {%.3s} {%0};
    #regex {$itemType} {-%w-} {#var itemType &1};
    #var apiPayload "roomID" : $roomID, "parent_area" : "$parent_area", "short": "$short", "type": "$itemType";
};

#NOP -- This is used by feeding the monster short received in the room;
#alias jsonFormatMonster {
    #unvar apiPayLoad;
    #map get roomvnum roomID;
    #map get roomarea parent_area;
    #local parent_area @sanitizePayload{$parent_area};
    #local short @sanitizePayload{%0};
    #var size 0;
    #var scaler 0;
    #var description $mob[desc];
    #var notes None;
    #var apiPayload "roomID" : $roomID, "parent_area" : "$parent_area", "short": "$short", "size": $size, "notes": "$notes", "scaler": $scaler, "description": "$description";
};

#NOP -- This is used by the .lookAtItem alias and is for adding armours (ac values), weapons, etc.;
#alias jsonFormatItem {
    #var apiItem[desc] @sanitizePayload{$apiItem[desc]};
    #var apiItem[short] @sanitizePayload{$apiItem[short]};
    #unvar apiPayLoad;
    #var apiPayload "short" : "$apiItem[short]", "description" : "$apiItem[desc]", "type" : "$apiItem[type]", "weapon_type" : "$apiItem[weapon_type]", "slot" : "$apiItem[slot]", "edged" : "$apiItem[edged]", "blunt" : "$apiItem[blunt]", "fire" : "$apiItem[fire]", "ice" : "$apiItem[ice]", "acid" : "$apiItem[acid]", "electricity" : "$apiItem[electricity]", "mind" : "$apiItem[mind]", "energy" : "$apiItem[energy]", "poison" : "$apiItem[poison]", "radiation" : "$apiItem[radiation]", "smd" : "$apiItem[smd]", "block" : "$apiItem[block]", "legendary" : "$apiItem[legendary]", "standard_resist_range" : "$apiItem[standard_resist_range]", "weight" : "$apiItem[weight]", "bind_on_equip" : "$apiItem[bind_on_equip]", "classification" : "$apiItem[classification]", "level_required" : "$apiItem[level_required]", "exceptionally_balanced" : "$apiItem[exceptionally_balanced]", "standard_damage_range" : "$apiItem[standard_damage_range]";
};

#alias apiPostMonster {
    .lookAtMob %0;
    #delay .5 {jsonFormatMonster %0};
    #delay 1 {
        #echo {Posting monster to 3kdb...};
        #system {curl -X POST https://www.3kpi.icu/api/monster/ -H "Content-Type: application/json" -d '{$apiPayload}'};
    };
};

#alias apiPostItem {
    jsonFormatItem;
    #echo {Posting item to 3kdb...};
    #system {curl -X POST https://www.3kpi.icu/api/item/ -H "Content-Type: application/json" -d '{$apiPayload}'};
};

#alias apiPostRoomItem {
    jsonFormatRoomItem %0;
    #echo {Posting item to 3kdb...};
    #system {curl -X POST https://www.3kpi.icu/api/item/ -H "Content-Type: application/json" -d '{$apiPayload}'};
};

#alias apiPostRoom {
    jsonFormatRoom;
    #echo {Posting room to 3kdb...};
    #system {curl -X POST https://www.3kpi.icu/api/room/ -H "Content-Type: application/json" -d '{"roomID" : "$roomID", "parent_area" : "$parent_area", "room_short": "$room_short", "room_long" : "$room_long", "room_exits" : "$room_exits"}'};
};

#alias apiPostAll {
    apiPostRoom;
    #var postMobs 1;
    #var postItems 1;
    #var postAll 1;
    #if {&room[mobs][] > 0} {
        #loop 1 &room[mobs][] i {
            apiPostMonster $room[mobs][$i][name];
            #if {&room[mobs][$i][items][] > 0} {
                #loop 1 &room[mobs][$i][items][] j {
                    apiPostItem $room[mobs][$i][items][$j][name];
                };
            };
        };
    };
    #if {&room[items][] > 0} {
        #loop 1 &room[items][] i {apiPostItem $room[items][$i];};
    };
    #ticker checkPost {#if !$postAll {#echo {ALL POSTED}}} {1};
};

#alias apiPostEternal {
    #var endpoint https://www.3kpi.icu/api/eternal_powers/;
    jsonFormatEternal;
    #echo {Posting $user eternal powers to 3kdb in 3 seconds...};
    #delay 3 {
        #script {python3 scripts/3kpiConnector.py $endpoint $apiPayload};
    };
};

#alias jsonFormatSatchel {
    update_satchel;
    #list apiSatchel clear;
    #var apiCharacter "character" : "$user";
    #foreach $craft[satchel][%*] index {
        #var apiComponentName $index[name];
        #replace apiComponentName {'} {};
        #var apiComponentName "component" : "$apiComponentName";
        #if {$index[legendary] > 0} {
            #var apiData "component_quality" : "legendary", "quantity" : $index[legendary];
            #list apiSatchel add {$apiCharacter , $apiComponentName , $apiData};
        };
        #if {$index[superior] > 0} {
            #var apiData "component_quality" : "superior", "quantity" : $index[superior];
            #list apiSatchel add {$apiCharacter , $apiComponentName , $apiData};
        };
        #if {$index[good] > 0} {
            #var apiData "component_quality" : "good", "quantity" : $index[good];
            #list apiSatchel add {$apiCharacter , $apiComponentName , $apiData};
        };
        #if {$index[average] > 0} {
            #var apiData "component_quality" : "average", "quantity" : $index[average];
            #list apiSatchel add {$apiCharacter , $apiComponentName , $apiData};
        };
        #if {$index[poor] > 0} {
            #var apiData "component_quality" : "poor", "quantity" : $index[poor];
            #list apiSatchel add {$apiCharacter , $apiComponentName , $apiData};
        };
    };
};

#alias apiPostSatchel {
    #unvar apiSatchelPayload;
    #var endpoint https://www.3kpi.icu/api/satchel/;
    jsonFormatSatchel;
    #delay 1 {#echo {Posting $user satchel to 3kdb...}};
    #delay 3 {
        #var apiSatchelPayload [;
        #loop 1 &apiSatchel[] item {
            #if {$item < &apiSatchel[]} {
                #cat apiSatchelPayload {\x7B};
                #cat apiSatchelPayload {$apiSatchel[$item]};
                #cat apiSatchelPayload {\x7D};
                #cat apiSatchelPayload {,};
            } {
                #cat apiSatchelPayload {\x7B};
                #cat apiSatchelPayload {$apiSatchel[$item]};
                #cat apiSatchelPayload {\x7D};
            };
        };
        #cat apiSatchelPayload {]};
        #var apiSatchelPayload "satchel" : $apiSatchelPayload;
        #NOP #script {python3 scripts/3kpiConnector.py $endpoint $apiSatchelPayload}
    };
};


#alias .apiPostSetup {
    #UNSUBSTITUTE {^-w-%1};
	#UNSUBSTITUTE {^-o-%1};
	#UNSUBSTITUTE {^-a-%1};
	#UNSUBSTITUTE {^-i-%1};
};

#alias {.populateRoomData} {
    #if {&room[mobs][] > 0} {
        #loop 1 &room[mobs][] i {
            .lookAtMob $room[mobs][$i][autoName];
        };
    };
#NOP     #if {&room[items][] > 0} {       ;
#NOP         #loop 1 &room[items][] i {apiPostItem $room[items][$i];};       ;
#NOP     };       ;
};

#alias {.lookAtMob} {
    #send {look at %0};
    #var mob[desc] {};
    #var mob[items] {};
    #var mobLine 1;
    #var mobDescCap 1;
    #var mobItemCap 0;
    .callCaptureMob;
            
    #line oneshot #action {^>$} {
        #format mob[desc] {%p} {$mob[desc]};
        #loop 1 &room[mobs][] i {
            #if {"$room[mobs][$i][name]" == "$mob[long]"} {
                #var room[mobs][$i][items] $mob[items];
                #var room[mobs][$i][desc] $mob[desc];
            };
        };
        #CLASS {tmpCapture} {kill};
    };
};

#alias .callCaptureMob {
    #class {tmpCapture} {open};

    #event {PROCESSED LINE}{
        #format tmpLine {%p} {%%1};
        #regex {$tmpLine} {%* must be on drugs to look that healthy.$} {#var mobDescCap 0};
        #regex {$tmpLine} {%* is in perfect health.$} {#var mobDescCap 0};
        #regex {$tmpLine} {%* has a few scratches and bruises.$} {#var mobDescCap 0};
        #regex {$tmpLine} {%* is bleeding from numerous wounds.$} {#var mobDescCap 0};
        #regex {$tmpLine} {%* is destined for the emergency ward.$} {#var mobDescCap 0};
        #regex {$tmpLine} {%* is waiting for Death to take %* into his arms.$} {#var mobDescCap 0};
        #if {$mobLine == 1} {
            .mobNameClean $tmpLine;
        } {
            #if {$mobDescCap} {
                #var mob[desc] {${mob[desc]} $tmpLine};
            };
            #if {$mobItemCap} {
                #regex {$tmpLine} {-%w-%*} {
                    #list mob[items] add {{{type} {&1} {name} {&2}}};
                };
            };
        };
        #regex {$tmpLine} {%* is carrying:} {#var mobItemCap 1};
        #math mobLine {$mobLine + 1};
    };
    #class {tmpCapture} {close};
};

#alias {.lookAtItem} {
    #send {look at %0};
    #var apiItem[desc] {};
    #var apiItem[short] {};
    #var apiItem[type] {};
    #var apiItem[weapon_type] {};
    #var apiItem[slot] {};
    #var apiItem[unbreakable] 0;
    #var apiItem[level_required] 1;
    #var apiItem[exceptionally_balanced] 0;
    #var apiItem[standard_resist_range] 1;
    #var apiItem[standard_damage_range] 1;
    #var apiItem[edged] 0;
    #var apiItem[blunt] 0;
    #var apiItem[fire] 0;
    #var apiItem[ice] 0;
    #var apiItem[acid] 0;
    #var apiItem[electricity] 0;
    #var apiItem[mind] 0;
    #var apiItem[energy] 0;
    #var apiItem[poison] 0;
    #var apiItem[radiation] 0;
    #var apiItem[smd] 0;
    #var apiItem[block] 0;
    #var apiItem[bind_on_equip] 0;
    #var apiItem[legendary] 0;
    #var apiItem[weight] {};
    #var apiItem[classification] Normal;


    #var itemLine 1;
    #var itemDescCap 1;
    #var acCap 0;
    .callCaptureItem;
};

#function ignoreCaptureLine {
    #var result 0;
    #local capturedLine %0;
    #NOP -- Lines we don't want captured on items/armours/etc.;
    #regex {$capturedLine} {This armor has: The mark of %*} {#var result 1};
    #regex {$capturedLine} {You sense this item is not original but rather a clever duplicate.} {#var result 1};
    #regex {$capturedLine} {This looks like it will wear out in %*.} {#var result 1};
    #regex {$capturedLine} {Its strength is currently {unyielding}.} {#var result 1};
    #regex {$capturedLine} {The Rod of Lordly Might is fated to you.} {#var result 1};
    #regex {$capturedLine} {You are fully attuned to this epic artifact.} {#var result 1};
};

#alias .callCaptureItemCleanup {
    #NOP -- We use the weight line to cleanup and assign some values based on others received, for example if;
    #NOP -- the slot is a shield, the "type" will be set to 'a';
    
    #var apiItem[weight] %0;
    #format apiItem[desc] {%p} $apiItem[desc];
    #format apiItem[short] {%p} $apiItem[short];
    #format apiItem[weight] {%p} $apiItem[weight];

    #SWITCH {"$apiItem[slot]"} {
        #CASE {"Helmet"} {#var apiItem[type] a};
        #CASE {"Shield"} {#var apiItem[type] a};
        #CASE {"Other"} {#var apiItem[type] a};
        #CASE {"Magical"} {#var apiItem[type] a};
        #CASE {"Unknown"} {#var apiItem[type] a};
        #CASE {"Cloak"} {#var apiItem[type] a};
        #CASE {"Ring"} {#var apiItem[type] a};
        #CASE {"Armour"} {#var apiItem[type] a};
        #CASE {"Other"} {#var apiItem[type] a};
        #CASE {"Amulet"} {#var apiItem[type] a};
        #CASE {"Helmet"} {#var apiItem[type] a};
        #CASE {"Gloves"} {#var apiItem[type] a};
        #CASE {"Boots"} {#var apiItem[type] a};
        #CASE {"Headband"} {#var apiItem[type] a};

        #CASE {"Object"} {#var apiItem[type] o};
        #CASE {"Weapon"} {#var apiItem[type] w};
        

        #CASE {"Wand"} {#var apiItem[type] i};
    };

    #class tmpCapture kill;
};

#alias .toggleItemDescCap {
    #var itemDescCap 0;
    #var apiItem[slot] %0;
    #format apiItem[slot] {%n} {$apiItem[slot]};
};

#alias .callCaptureItem {
    #class {tmpCapture} {open};
    
    #NOP -- Kill the class no matter what after 3 seconds;
    #delay {class_kill} {.callCaptureItemCleanup} {3};

    #event {PROCESSED LINE}{
        #format tmpLine {%p} {%%1};
        #var ignoreLine @ignoreCaptureLine{$tmpLine};

        #if {!$ignoreLine} {
            #NOP -- These are used to signify the end of the item description capture;
            #regex {$tmpLine} {You sense this item is not original but rather a clever duplicate.} {#var itemDescCap 0};
            #regex {$tmpLine} {The %w is in flawless condition.} {.toggleItemDescCap &1};
            #regex {$tmpLine} {The %w is in perfect condition.} {.toggleItemDescCap &1};
            #regex {$tmpLine} {This %w is in excellent condition.} {.toggleItemDescCap &1};
            #regex {$tmpLine} {This item is bound to you.} {#var apiItem[bind_on_equip] 1;#var itemDescCap 0;};
            
            #regex {$tmpLine} {This item is legendary and you cannot possess more than one.} {
                #var apiItem[legendary] 1;
                #var apiItem[classification] Legendary;
            };
            #regex {$tmpLine} {This appears to be an artifact for the %* guild.} {#var apiItem[classification] Guild Artifact};
            #regex {$tmpLine} {It looks unbreakable.} {#var apiItem[unbreakable] 1};

            #NOP -- Armor Specific Settings;
            #regex {$tmpLine} {You must be level %d to wear this.} {#var apiItem[level_required] &1};
            #regex {$tmpLine} {This armor has a non-standard resistance range.} {#var apiItem[standard_resist_range] 0};
            #regex {$tmpLine} {This item will bind to you when equipped.} {#var apiItem[bind_on_equip] 1};
            #regex {$tmpLine} {Block chance : \~%d\%} {#var apiItem[block] &1};
            #regex {$tmpLine} {This armor provides special defense against melee attacks.} {#var apiItem[smd] 1};

            #NOP -- Weapon Specific Settings;
            #regex {$tmpLine} {This weapon gains benefits from your %w weapon skill.} {#var apiItem[weapon_type] &1};
            #regex {$tmpLine} {This weapon is exceptionally balanced.} {#var apiItem[exceptionally_balanced] 1};
            #regex {$tmpLine} {You must be level %d to wield this weapon.} {#var apiItem[level_required] &1};

            #if {$itemLine == 1} {
                #var apiItem[short] $tmpLine;
                #format apiItem[short] {%p} {$apiItem[short]};
                
                #NOP -- Get rid of the * as first char if it's there;
                #list tmpList tokenize $apiItem[short];
                #if {"$tmpList[1]" == "*"} {
                    #list tmpList delete 1;
                    #var apiItem[short] $tmpList;
                    #list apiItem[short] collapse;
                };
                #replace apiItem[short] { (worn)%*} {};
                #replace apiItem[short] { (worn on %*} {};
                
            } {
                #if {$itemDescCap} {
                    #var apiItem[desc] {${apiItem[desc]} $tmpLine};
                };
                #if {$acCap} {
                    #regex {$tmpLine} {%d edged} {#var apiItem[edged] &1};
                    #regex {$tmpLine} {%d blunt} {#var apiItem[blunt] &1};
                    #regex {$tmpLine} {%d fire} {#var apiItem[fire] &1};
                    #regex {$tmpLine} {%d ice} {#var apiItem[ice] &1};
                    #regex {$tmpLine} {%d acid} {#var apiItem[acid] &1};
                    #regex {$tmpLine} {%d electric} {#var apiItem[electricity] &1};
                    #regex {$tmpLine} {%d mind} {#var apiItem[mind] &1};
                    #regex {$tmpLine} {%d energy} {#var apiItem[energy] &1};
                    #regex {$tmpLine} {%d poison} {#var apiItem[poison] &1};
                    #regex {$tmpLine} {%d radiation} {#var apiItem[radiation] &1};
                };
            };
            #regex {$tmpLine} {This armor has the following resistances:} {#var acCap 1};
            #math itemLine {$itemLine + 1};
            
            #NOP -- Use the weight line to end the capture;
            #regex {$tmpLine} {It looks very light.} {.callCaptureItemCleanup It looks very light.};
            #regex {$tmpLine} {It looks light.} {.callCaptureItemCleanup It looks light.};
            #regex {$tmpLine} {It doesn't look too heavy.} {.callCaptureItemCleanup It doesn't look too heavy.};
            #regex {$tmpLine} {It looks heavy.} {.callCaptureItemCleanup It looks heavy.};
            #regex {$tmpLine} {It would take considerable effort to lift this.} {.callCaptureItemCleanup It would take considerable effort to lift this.};
            #regex {$tmpLine} {You'll most likely herniate a disc lifting this} {.callCaptureItemCleanup You'll most likely herniate a disc lifting this.};
        };
    };
    #class {tmpCapture} {close};
};

#class 3kpi close;