#class {dmgtracker} {kill}
#class {dmgtracker} {open}

#var dmgtracker 1;

#alias .trackExtraAttack {
    #math cmbt[extra_attacks][round] {$cmbt[extra_attacks][round] + 1};
    #math cmbt[extra_attacks][total] {$cmbt[extra_attacks][total] + 1};
};

#alias dmgTrack {
    #format newBest {%u} {NEW BEST %1 ROUND: };
    #var cmbt[category][%1][name] %1;
    #var cmbt[category][%1][curr] %2;
    #math cmbt[category][%1][dmg] {$cmbt[category][%1][dmg] + %2};
    #math cmbt[category][%1][rnd] {$cmbt[category][%1][rnd] + 1};
    #math cmbt[category][%1][avg] {$cmbt[category][%1][dmg] / $cmbt[category][%1][rnd]};
    

    #if {$cmbt[category][%1][freq][%3][count] > 0} {
        #math cmbt[category][%1][freq][%3][count] {$cmbt[category][%1][freq][%3][count] + 1};
        #math cmbt[category][%1][freq][%3][dmg] {$cmbt[category][%1][freq][%3][dmg] + %2};
        #math cmbt[category][%1][freq][%3][avg] {$cmbt[category][%1][freq][%3][dmg] / $cmbt[category][%1][freq][%3][count]};
    } {
        #var cmbt[category][%1][freq][%3][name] %1;
        #var cmbt[category][%1][freq][%3][count] 1;
        #var cmbt[category][%1][freq][%3][dmg] %2;
        #var cmbt[category][%1][freq][%3][avg] %2;
    };

    #if {$cmbt[category][%1][dmg] < 1000} {
        #math cmbt[histogram][999] {$cmbt[histogram][999] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 999 && $cmbt[category][%1][dmg] <= 2000} {
        #math cmbt[histogram][2000] {$cmbt[histogram][2000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 1999 && $cmbt[category][%1][dmg] <= 3000} {
        #math cmbt[histogram][3000] {$cmbt[histogram][3000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 2999 && $cmbt[category][%1][dmg] <= 4000} {
        #math cmbt[histogram][4000] {$cmbt[histogram][4000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 3999 && $cmbt[category][%1][dmg] <= 5000} {
        #math cmbt[histogram][5000] {$cmbt[histogram][5000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 4999 && $cmbt[category][%1][dmg] <= 6000} {
        #math cmbt[histogram][6000] {$cmbt[histogram][6000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 5999 && $cmbt[category][%1][dmg] <= 7000} {
        #math cmbt[histogram][7000] {$cmbt[histogram][7000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 6999 && $cmbt[category][%1][dmg] <= 8000} {
        #math cmbt[histogram][8000] {$cmbt[histogram][8000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 7999 && $cmbt[category][%1][dmg] <= 9000} {
        #math cmbt[histogram][9000] {$cmbt[histogram][9000] + 1};
    };

    #if {$cmbt[category][%1][dmg] > 8999 && $cmbt[category][%1][dmg] <= 10000} {
        #math cmbt[histogram][10000] {$cmbt[histogram][10000] + 1};
    };
    
    #if {"${cmbt[category][%1][high]}" === ""} {#var cmbt[category][%1][high] 0};
    #if {$cmbt[category][%1][curr] > $cmbt[category][%1][high]} {
        #var cmbt[category][%1][high] $cmbt[category][%1][curr];
        #if $gags[combat_numbers] {#NOP} {
            #echo {$newBest $dmgDisplay};
        };
    };
};


#alias dmgFormat {
    #math tmpPercent {1.00 * $cmbt[category][%1][rnd] / $cmbt[category][total][rnd] * 100};
    #format dmgName {%n} {%1};
    #format dmgAvg {%g} {$cmbt[category][%1][avg]};
    #format dmgTotal {%M} {$cmbt[category][%1][dmg]};
    #replace dmgTotal {G} {B};
    #format dmgBest {%g} {$cmbt[category][%1][high]};
    #format dmgActive {%d} {$tmpPercent};
    #format dmgSummary {%+12s %+9s %+9s %+9s %+9s} {$dmgName} {$dmgAvg} {$dmgTotal} {$dmgBest} {${dmgActive}%};
    #echo $dmgSummary;
};

#alias dmgFormatHits {
    #math tmpPercent {1.00 * $cmbt[category][%1][rnd] / $cmbt[category][total][rnd] * 100};
    #format dmgName {%n} {%1};
    #format dmgActive {%d} {$tmpPercent};
    #echo {<efb>$dmgName - $dmgActive of Rounds<088>};
    #loop 1 &cmbt[category][%1][freq][] freq {
        #format dmgAvg {%g} {$cmbt[category][%1][freq][$freq][avg]};
        #format dmgRounds {%g} {$cmbt[category][%1][freq][$freq][count]};
        #format dmgSummary {%+12s %+9s %+9s} {$freq} {$dmgAvg} {$dmgRounds};
        #echo $dmgSummary;
    };
};

#alias {dreset} {

    #var dmgt[curr] 0;
    #var dmgt[avg] 0;
    #var dmgt[count] 0;
    #var dmgt[high] 0;
    #var dmgt[dmg] 0;

    #var cmbt[affects][witchHat] 0;
    #var cmbt[affects][BGH] 0;
    #var cmbt[affects][assassin] 0;
    #var cmbt[affects][tactician] 0;
    #var cmbt[affects][magician] 0;
    #var cmbt[affects][DM] 0;
    #var cmbt[affects][bloodfuse] 0;
    #var cmbt[affects][clutch] 0;
    #var cmbt[affects][jump] 0;
    #var cmbt[affects][punch] 0;
    #var cmbt[affects][kick] 0;
    #var cmbt[affects][pointDefense] 0;
    #var cmbt[affects][CMC] 0;
    #var cmbt[penetration][round] 0;
    #var cmbt[penetration][total] 0;
    #var cmbt[extra_attacks][round] 0;
    #var cmbt[extra_attacks][total] 0;
    #var cmbt[crit][round] 0;
    #var cmbt[crit][total] 0;
    #var ewell_round 0;
    #var fry_round 0;

    #var dmgt[curr] 0;
    #var dmgt[avg] 0;
    #var dmgt[count] 0;
    #var dmgt[high] 0;
    #var dmgt[dmg] 0;

    #foreach $cmbt[category][%*] item {
        #var cmbt[category][${item[name]}][curr] 0;
        #var cmbt[category][${item[name]}][dmg] 0;
        #var cmbt[category][${item[name]}][rnd] 0;
        #var cmbt[category][${item[name]}][avg] 0;
        #var cmbt[category][${item[name]}][high] 0;
    };

    #var dog[rnd] 0;
    #var dog[dmg] 0;
};

dreset;

#NOP -- Toggles for items;
#action {The CMC-660 REFLECTS the entire attack!!} {
    #if $gags[combat_items] {#line gag};
    #var cmbt[affects][CMC] 1;
} {2};


#NOP -- Toggles for necro powers;
#action {^B:You grab your enemy with your talons in a clutch of death!$} {#var cmbt[affects][clutch] 1} {2};
#action {^B:You grasp hold of your enemy with the dark touch of death.$} {#var cmbt[affects][grasp] 1} {2};
#action {^You grab hold of %w with your left talon} {#var cmbt[affects][bloodarc] 1} {2};
#action {^Scarlet lightning flies from your hand and scorches a massive wound } {#var cmbt[affects][bloodarc] 1} {2};
#action {^Your eyes burn with a blinding rage that strikes fear into your very} {#var cmbt[affects][bloodarc] 1} {2};
#action {^You reach back and strike your bony hand outward, toward %*} {#var cmbt[affects][bloodarc] 1} {2};
#action {^A violet scream erupts from your lips as you strikes forth with a} {#var cmbt[affects][bloodarc] 1} {2};
#action {^You raise your palm forward and a %* skull of %*} {#var cmbt[affects][skullfire] 1} {2};

#NOP -- Toggles for profession boosts;
#action {^Your crazed ambition overflows!$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][BGH] 1;
} {2};
#action {^Your wild ambition takes a back seat to prudence.$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][BGH] 0;
} {2};
#action {^You feel a sudden wave of alcohol induced fury overcome you!$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][DM] 1;
} {2};
#action {^Your alcohol fueled strength dissipates.} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][DM] 0;
} {2};
#action {^A flash of insidious insight strikes you!$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][assassin] 1;
} {2};
#action {^Your insidious inspiration fades.$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][assassin] 0;
} {2};
#action {^You outfox your opponent and take advantage of it!$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][tactician] 1;
} {2};
#action {^Your tactical advantage ends.$} {
    #if $gags[combat_generic] {#line gag};
    #var cmbt[affects][tactician] 0;
} {2};


#ACTION {^[%d] %* {mind warp|sunspear|incinerate|frostbite|burning hands|acid arrow|disintegrate|prismatic spray|venomous spray}%*} {
    #var incombat 1;
    #var spell_dmg[curr] %1;
    #math spell_dmg[dmg] {$spell_dmg[dmg] + %1};
    #math spell_dmg[rnd] {$spell_dmg[rnd] + 1};
    #math spell_dmg[avg] {$spell_dmg[dmg] / $spell_dmg[rnd]};
    #math new_best {$spell_dmg[curr] > $spell_dmg[high]};
    #if $new_best {
        #var spell_dmg[high] $spell_dmg[curr];
        #ECHO {NEW BEST SPELL DMG: $spell_dmg[high]};
    };

    #math spell_dmg[%3][dmg] {$spell_dmg[%3][dmg] + $spell_dmg[dmg]};
    #math spell_dmg[%3][rnd] {$spell_dmg[%3][rnd] + 1};
    #math spell_dmg[%3][avg] {$spell_dmg[%3][dmg] / $spell_dmg[%3][rnd]};

    #math new_best {$spell_dmg[curr] > $spell_dmg[%3][high]};
    #if $new_best {#var spell_dmg[%3][high] $spell_dmg[curr]};
    
} {2};

#action {^You drive your attack past %* resistances!$} {
    #math cmbt[penetration][round] {$cmbt[penetration][round] + 1};
    #math cmbt[penetration][total] {$cmbt[penetration][total] + 1};
} {2};

#action {^***THAWHACK*** You critically hit %*!$} {
    #math cmbt[crit][round] {$cmbt[crit][round] + 1};
    #math cmbt[crit][total] {$cmbt[crit][total] + 1};
} {2};

#action {^**THWACK** You critically hit %*!$} {
    #math cmbt[crit][round] {$cmbt[crit][round] + 1};
    #math cmbt[crit][total] {$cmbt[crit][total] + 1};
} {2};

#action {^Your great speed allows you to attack again!$} {
    .trackExtraAttack;
} {2};

#NOP -- Damage modifier captures;
#action {^You bash %* with your shield%*} {
    #var cmbt[affects][shield_bash] 1;
} {2};

#action {A bolt of electricity streams from your hat into %*!$} {
    #var cmbt[affects][witchHat] 1;
} {2};

#action {^A bolt of pure energy flies out of the sky striking %*!$} {
    #var cmbt[affects][eradication] 1;
} {2};

#action {^With iron will, you finally guide the deadly spell toward its target!$} {
    #var cmbt[affects][iprime] 1;
} {2};

#action {^Smoldering from the impact, the corpse rises with an unholy energy.} {
    #var cmbt[affects][bloodfuse] 1;
} {2};

#action {^Its energy spent, the dark creature lets loose a horrible scream} {
    #var cmbt[affects][bloodfuse] 0;
} {2};

#NOP -- Convoke we'll track each round to see how the damage increases each round;
#action {^B:Your vampiric essence calls out to the children of the night.} {#var cmbt[affects][convoke] 1;} {2};

 
#action {^The brilliant sphere of energy explodes!} {
    #var ewell_round 1;
} {2};

#action {Energy flashes down from the sky, frying %*!} {
    #var fry_round 1;
} {2};

#alias .dmg_round_reset {
    #delay {dmg_round_reset} {
        #var cmbt[affects][shield_bash] 0;
        #var cmbt[affects][witchHat] 0;
        #var cmbt[affects][iprime] 0;
        #var cmbt[affects][eradication] 0;
        #var cmbt[affects][clutch] 0;
        #var cmbt[affects][grasp] 0;
        #var cmbt[affects][bloodarc] 0;
        #var cmbt[affects][skullfire] 0;
        #var cmbt[affects][lucanus_cloak] 0;
        #var cmbt[penetration][round] 0;
        #var cmbt[extra_attacks][round] 0;
        #var cmbt[crit][round] 0;
        #var ewell_round 0;
        #var fry_round 0;
        #if {$cmbt[affects][convoke] == 4} {#var cmbt[affects][convoke] 0;};
        #if {"$guild" == "mage"} {
            #foreach *summon_dmg[vaf][%*] tmpSummonItem {
                #var summon_dmg[vaf][$tmpSummonItem][round][damage] 0;
                #var summon_dmg[vaf][$tmpSummonItem][round][hits] 0;
            };
        };
    } {.3};
};

#action {^%* hits you for %d damage!$} {
    #local dmgAmount {};
    #format dmgAmount {%d} {%2};
    #format dmgDisplay {%g} {$dmgAmount};
    #line gag;
    #echo {%1 hits you for $dmgDisplay damage!};
} {2};

#NOP -- If you've just conjured undeads with necromancer, ignore those;
#act {{^You hit (.*) (\d+) (time|times) for (\d+) damage\.$}} {
    #var dmgTrackerNewRound 1;
    #if {"$guild" == "mage"} {
        #var summonDmgNewRound 1;
        #var tempHighSummonDmg 0;
        #if {!$ewell_round && !$fry_round} {
            #foreach *summon_dmg[vaf][%*] tmpSummonItem {
                #math tempHighSummonDmg {$tempHighSummonDmg + $summon_dmg[vaf][$tmpSummonItem][round][damage]};
            };
            #if {$tempHighSummonDmg > $summon_dmg[high]} {
                #var summon_dmg[high] $tempHighSummonDmg;
                #echo {<eaa>NEW BEST SUMMON ROUND: $tempHighSummonDmg<088>};
            };
        };
    };
    #if {"$guild" == "necromancer" && "%2" == "Undead"} {#NOP} {
        #var vaf[numbers] 1;
        #var incombat 1;
        #local dmgAmount {};
        #format enemy[name_numbers] {%l} {%2};
        #format dmgTimes {%d} %3;
        #format dmgAmount {%d} %5;
        #format dmgDisplay {%g} {$dmgAmount};
        #line gag;
        #if $gags[combat_numbers] {#NOP} {
            #echo {You hit %2 %3 %4 for $dmgDisplay damage.};
        };

        #math mob[damage_dealt] {$mob[damage_dealt] + $dmgAmount};

        #if {$vaf[numbers]} {#var incombat 1};

        #if {!$ewell_round} {
            #if $fry_round {
                dmgTrack Fry $dmgAmount $dmgTimes;
            } {
                dmgTrack total $dmgAmount $dmgTimes;

                #if {"$guild" == "necromancer" && $my[necromancer][glamors][furious]} {
                    dmgTrack fury $dmgAmount $dmgTimes;
                };

                #if {"$guild" == "necromancer" && $my[necromancer][glamors][raging]} {
                    dmgTrack rage $dmgAmount $dmgTimes;
                };

                #NOP -- If it's an iprime or eradication round, pull those out;
                #if {$cmbt[affects][eradication] || $cmbt[affects][iprime]} {
                    #if {$cmbt[affects][eradication]} {
                        dmgTrack eradication $dmgAmount $dmgTimes;
                    };

                    #if {$cmbt[affects][iprime]} {
                        dmgTrack iprime $dmgAmount $dmgTimes;
                    };
                } {
                    #if {$mob[lucanus_ring]} {
                        dmgTrack lucanus $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][lucanus_cloak]} {
                        dmgTrack lucan_cloak $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][BGH]} {
                        dmgTrack BGH $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][assassin]} {
                        dmgTrack assassin $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][tactician]} {
                        dmgTrack tactician $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][magician]} {
                        dmgTrack magician $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][DM]} {
                        dmgTrack DM $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][bloodfuse]} {
                        dmgTrack bloodfuse $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][bloodarc]} {
                        dmgTrack bloodarc $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][clutch]} {
                        dmgTrack clutch $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][grasp]} {
                        dmgTrack grasp $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][skullfire]} {
                        dmgTrack skullfire $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][witchHat]} {
                        dmgTrack witchHat $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][convoke]} {
                        dmgTrack convoke_${cmbt[affects][convoke]} $dmgAmount $dmgTimes;
                        #math cmbt[affects][convoke] {$cmbt[affects][convoke] + 1};
                    };
                    #if {$cmbt[affects][jump]} {
                        dmgTrack jump $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][punch]} {
                        dmgTrack punch $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][kick]} {
                        dmgTrack kick $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][pointDefense]} {
                        dmgTrack pointDefense $dmgAmount $dmgTimes;
                    };
                    #if {$cmbt[affects][CMC]} {
                        dmgTrack CMC $dmgAmount $dmgTimes;
                    };
                };
            };
        };
        .dmg_round_reset;
    }
} {2};
    

#act {%1 hits you for %2 damage!} {
    #var incombat 1;
    #var dmgt[curr] %2;
    #math dmgt[dmg] {$dmgt[dmg] + %2};
    #math dmgt[count] {$dmgt[count] + 1};
    #math {dmgt[avg]} {$dmgt[dmg] / $dmgt[count]};
} {2};



#alias {dstats} {
    #format dmgHeader {%+12s %+9s %+9s %+9s %+9s} {} {Avg} {Total} {Best} {% Rnds};
    #format tempNumber {%g} {$cmbt[category][total][rnd]};
    #format dmgTitle  {%+48s} {DAMAGE REPORT ($tempNumber Rounds)};
    #echo {<faa>$dmgTitle<088>};
    #echo $dmgHeader;

    #if {"%0" == "hits"} {
        dmgFormatHits total;

        #foreach $cmbt[category][%*] item {
            #if {"$item[name]" != "total" && $item[rnd] > 0} {
                dmgFormatHits $item[name];
            };
        };
    } {
        dmgFormat total;

        #foreach $cmbt[category][%*] item {
            #if {"$item[name]" != "total" && $item[rnd] > 0} {
                dmgFormat $item[name];
            };
        };
    };

    #if {"$guild" == "juggernaut"} {

        #NOP -- mount dmg;
        #format mount_dmg[avg] {%g} {$mount_dmg[avg]};
        #local tempTotalMountDmg 0;
        #format tempTotalMountDmg {%M} {$mount_dmg[dmg]};
        #replace tempTotalMountDmg {G} {B};

        #format tempHighMountDmg {%g} {$mount_dmg[high]};

        #NOP -- truck dmg;
        #format truck_dmg[avg] {%g} {$truck_dmg[avg]};
        #local tempTotalTruckDmg 0;
        #format tempTotalTruckDmg {%M} {$truck_dmg[dmg]};
        #replace tempTotalTruckDmg {G} {B};

        #format tempHighTruckDmg {%g} {$truck_dmg[high]};

        #NOP -- support mech dmg;
        #format support_dmg[avg] {%g} {$support_dmg[avg]};
        #local tempTotalSupportDmg 0;
        #format tempTotalSupportDmg {%M} {$support_dmg[dmg]};
        #replace tempTotalSupportDmg {G} {B};

        #format tempHighSupportDmg {%g} {$support_dmg[high]};

        #echo {\nAverage Mount damage : $mount_dmg[avg] over $mount_dmg[rnd] rounds.  Total: $tempTotalMountDmg damage.};
        #echo {\High Mount damage : $tempHighMountDmg};

        #echo {\nAverage Truck damage : $truck_dmg[avg] over $truck_dmg[rnd] rounds.  Total: $tempTotalTruckDmg damage.};
        #echo {\High Truck damage : $tempHighTruckDmg};

        #echo {\nAverage Support Mech damage : $support_dmg[avg] over $support_dmg[rnd] rounds.  Total: $tempTotalSupportDmg damage.};
        #echo {\High Support Mech damage : $tempHighSupportDmg};
    };
    
    #if {"$guild" == "mage"} {

        #format spell_dmg[avg] {%g} {$spell_dmg[avg]};
        #local tempTotalSpellDmg 0;
        #format tempTotalSpellDmg {%M} {$spell_dmg[dmg]};
        #replace tempTotalSpellDmg {G} {B};

        #format tempHighSpellDmg {%g} {$spell_dmg[high]};

        #var tempTotalSummonDmg 0;
        #var tempAvgSummonDmg 0;
        #foreach *summon_dmg[vaf][%*] tmpSummonItem {
            #math tempTotalSummonDmg {$tempTotalSummonDmg + $summon_dmg[vaf][$tmpSummonItem][total][damage]};
        };
        #math tempAvgSummonDmg {$tempTotalSummonDmg / $summon_dmg[rnd]};
        #format tempAvgSummonDmg {%g} {$tempAvgSummonDmg};

        #format tempTotalSummonDmg {%M} {$tempTotalSummonDmg};
        #replace tempTotalSummonDmg {G} {B};

        #format tempHighSummonDmg {%g} {$summon_dmg[high]};

        #echo {\nAverage Spell damage : $spell_dmg[avg] over $spell_dmg[rnd] rounds.  Total: $tempTotalSpellDmg damage.};
        #echo {\High Spell damage : $tempHighSpellDmg};
        #echo {\nAverage Summon damage : $tempAvgSummonDmg over $summon_dmg[rnd] rounds.  Total: $tempTotalSummonDmg damage.};
        #echo {\High Summon damage : $tempHighSummonDmg};
    };
    
    #echo {\n------- DAMAGE BY # OF HTIS -------};
    #foreach $cmbt[freq][%*] item {
        #echo {$item[name] hits : @formatThousands{$item[avg]} Avg. achieved $item[count] times};
    };

    #echo {\nDamage taken   : Average @formatThousands{$dmgt[avg]} over @formatThousands{$dmgt[count]} hits.  Total: @formatThousands{$dmgt[dmg]} damage.\n};

    #math {dog[avg]} {$dog[dmg] / $dog[rnd]};
    #math {cmbt[totalavg]} {$dog[avg] + $cmbt[avg]};
    #nop showme {Dog Avg: $dog[avg] over $dog[rnd] rounds.  Total dog: $dog[dmg] damage.  Total average: $cmbt[totalavg] damage/rnd.};
};

#NOP -- lucanus cloak;
#action {Your cloak glows as the attack strikes it and suddenly sends a blast of} {
    #var cmbt[affects][lucanus_cloak] 1;
} {2};

#NOP Juggernaut Dmg tracking;
#NOP -- death from above;
#action {^You jump attack %* for %* damage. \{%d\}} {
    #var dmgTimes 1;
    #var dmgAmount %3;
    dmgTrack jump $dmgAmount $dmgTimes;
} {2};

#NOP -- punch;
#action {^You punch %* for %* damage. \{%d\}} {
    #var dmgTimes 1;
    #var dmgAmount %3;
    dmgTrack punch $dmgAmount $dmgTimes;
} {2};

#NOP -- kick;
#action {^You kick %* for %* damage. \{%d\}} {
    #var dmgTimes 1;
    #var dmgAmount %3;
    dmgTrack kick $dmgAmount $dmgTimes;
} {2};

#NOP -- point defense;
#action {^Point defenses %* target. \{%d\}} {
    #var dmgTimes 1;
    #var dmgAmount %2;
    dmgTrack pointDefense $dmgAmount $dmgTimes;
} {2};

#NOP -- point defense debuff;
#action {^The target is engulfed in flames from your flamethrower.  %* seems distracted by the flames. \{%d\}} {
    #var dmgTimes 1;
    #var dmgAmount %2;
    dmgTrack pointDefense $dmgAmount $dmgTimes;
} {2};

#NOP -- jugger crititcal hit;
#NOP #action {The computer chirps 'A critical hit was scored!'};

#NOP -- truck;
#action {^Your tank %*. \{%d\}$} {
    #var incombat 1;
    #var truck_dmg[curr] %2;
    #math truck_dmg[dmg] {$truck_dmg[dmg] + %2};
    #math truck_dmg[rnd] {$truck_dmg[rnd] + 1};
    #math truck_dmg[avg] {$truck_dmg[dmg] / $truck_dmg[rnd]};
    #math new_best {$truck_dmg[curr] > $truck_dmg[high]};
    #if $new_best {
        #var truck_dmg[high] $truck_dmg[curr];
        #if $gags[combat_numbers] {#NOP} {
            #ECHO {NEW BEST TRUCK DMG: $truck_dmg[high]};
        };
    };
} {2};

#action {^%* is %* by your tank. \{%d\}$} {
    #var incombat 1;
    #var truck_dmg[curr] %3;
    #math truck_dmg[dmg] {$truck_dmg[dmg] + %3};
    #math truck_dmg[rnd] {$truck_dmg[rnd] + 1};
    #math truck_dmg[avg] {$truck_dmg[dmg] / $truck_dmg[rnd]};
    #math new_best {$truck_dmg[curr] > $truck_dmg[high]};
    #if $new_best {
        #var truck_dmg[high] $truck_dmg[curr];
        #if $gags[combat_numbers] {#NOP} {
            #ECHO {NEW BEST TRUCK DMG: $truck_dmg[high]};
        };
    };
} {2};

#action {^You %* with your tank. \{%d\}$} {
    #var incombat 1;
    #var truck_dmg[curr] %2;
    #math truck_dmg[dmg] {$truck_dmg[dmg] + %2};
    #math truck_dmg[rnd] {$truck_dmg[rnd] + 1};
    #math truck_dmg[avg] {$truck_dmg[dmg] / $truck_dmg[rnd]};
    #math new_best {$truck_dmg[curr] > $truck_dmg[high]};
    #if $new_best {
        #var truck_dmg[high] $truck_dmg[curr];
        #if $gags[combat_numbers] {#NOP} {
            #ECHO {NEW BEST TRUCK DMG: $truck_dmg[high]};
        };
    };
} {2};

#NOP -- mount;
#action {^%* is %* by your {ER PPC|Lrg pulse laser|ER Lrg laser|Mdm pulse laser|ER Mdm Laser|Sml Pulse Laser|ER Sml Laser|Lrm 20|Lrm 15|SSrm 6|Lrm 10|SSrm 4|Lrm 5|SSrm 2|Gauss Rifle|Micro Gauss Rifle|Ultra Ac 10|Ultra Ac 5|Ultra Ac 2|Machine gun}. \{%d\}$} {
    #var incombat 1;
    #var mount_dmg[curr] %4;
    #math mount_dmg[dmg] {$mount_dmg[dmg] + %4};
    #math mount_dmg[rnd] {$mount_dmg[rnd] + 1};
    #math mount_dmg[avg] {$mount_dmg[dmg] / $mount_dmg[rnd]};
    #math new_best {$mount_dmg[curr] > $mount_dmg[high]};
    #if $new_best {
        #var mount_dmg[high] $mount_dmg[curr];
        #if $gags[combat_numbers] {#NOP} {
            #ECHO {NEW BEST MOUNT DMG: $mount_dmg[high]};
        };
    };
} {2};

#NOP support mech;
#action {^%*'s Jugger Support Mech fires at %* and %*. \{%d\}$} {
    #var incombat 1;
    #NOP current damage from hit;
    #local support_dmg_curr %4;
    #NOP round identifier;
    #local support_new_round_identifier {$total_rounds};
    #NOP set a maximum limit for hits per round;
    #local max_hits_per_round 5;

    #NOP Validate total_rounds before processing to ensure it is not missing or invalid; 
	#if {!$total_rounds || !$ismath($total_rounds)} {
		#echo {Error: Invalid or missing total_rounds. Skipping processing.};
		#return;
	};

    #if {$support_new_round_identifier != $support_current_round} {
        #NOP New round detected, finalize the previous round BEFORE processing the current hit;
        #math new_best {$support_round_dmg > $support_dmg[high]};
        #if $new_best {
            #NOP update highest round damage;
            #var support_dmg[high] $support_round_dmg;
            #if $gags[combat_numbers] {#NOP} {
                #ECHO {NEW BEST SUPPORT MECH ROUND DMG: $support_dmg[high]};
            };
        };
        #NOP increment round counter;
        #math support_dmg[rnd] {$support_dmg[rnd] + 1};
        #NOP update current round;
        #var support_current_round $support_new_round_identifier;
        #NOP reset round damage;
        #var support_round_dmg 0;
        #NOP reset hit counter for the new round;
        #var hits_this_round 0;
    };

    #if {$hits_this_round < $max_hits_per_round} {
        #NOP accumulate damage for the current round;
        #math support_round_dmg {$support_round_dmg + $support_dmg_curr};
        #NOP update total damage;
        #math support_dmg[dmg] {$support_dmg[dmg] + $support_dmg_curr};
        #NOP increment hit counter for the current round;
        #math hits_this_round {$hits_this_round + 1};
        #NOP update average damage;
        #math support_dmg[avg] {$support_dmg[dmg] / $support_dmg[rnd]};
    } {
        #NOP Maximum hits for this round reached, ignoring additional hits;
        #ECHO {DEBUG: Hit ignored as it exceeds the max hits per round.};
    };
} {2};

#NOP #ticker dmg_stats {    #var caption_data[dmg] {\n Average damage : $cmbt[avg] over $cmbt[rnd] rounds.  Total: $cmbt[dmg] damage.\n Best damage : $cmbt[high] damage};} 2;

#class {dmgtracker} {close}