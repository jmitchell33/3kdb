#class {corpse_manager} {kill}
#class {corpse_manager} {open}

#NOP -- GENERAL CORPSE MANAGEMENT TRACKING FOR HPBAR;
#var corpse_check 0;
#var corpses[inventory] 0;
#var corpses[smuggle] 0;
#var corpses[cooler] 0;
#var corpses[coffin] 0;
#var corpses[freezer] 0;
#var corpses[servant] 0;
#var corpses[golem] 0;


#NOP -- Block certain things from picking up as "corpse";
#act {There is no corpse in this room master.} {#NOP} {1};
#act {You must have a corpse to absorb.} {#NOP} {1};

#alias check_corpses {
	i;
    examine cooler;
    smuggle;
};


#action {You have no {corpse|remains}.} {check_corpses} {1};

#NOP -- Donate your corpses to the morgue and then go back/resuming botting;
#alias dcoffin {
    .pause;
    #map get roomvnum donate_go_back;
    #path save forward path;
    #path get position pos;
	go morgue;
    donate coffin;donate all;
    #map run $donate_go_back;
    #path load $path;
    #path goto $pos;
    #var bot[paused] 0;
};

#alias dcoffin1 {
    .pause;
    #map get roomvnum donate_go_back;
    #path save forward path;
    #path get position pos;
	go morgue;
    donate coffin;donate all;
	deslab all;
	#${corpses[cooler]} uncooler corpse;
	#10 {wrap all;donate coffin};
	#5 {get all;donate all};
    #map run $donate_go_back;
    #path load $path;
    #path goto $pos;
    #var bot[paused] 0;
};

#alias cooler_rotate {
	trace glyph;
	#%1 {deslab;get corpse;cooler corpse};
	trace glyph;
};

#NOP -- $corpse_string is a generic string to be inserted in your hpbar - added to the ticker for the tickhp;
#alias {_update_corpse_string} {
	#NOP -- If any of them happen to go negative, set to 0;
	#if {$corpses[coffin] < 0} {#var corpses[coffin] 0;};
	#if {$corpses[inventory] < 0} {#var corpses[inventory] 0;};
	#if {$corpses[smuggle] < 0} {#var corpses[smuggle] 0;};
	#if {$corpses[freezer]  < 0} {#var corpses[freezer] 0;};
	#if {$corpses[cooler] < 0} {#var corpses[cooler] 0;};
	#if {$corpses[servant] < 0} {#var corpses[servant] 0;};
	#if {$corpses[golem] < 0} {#var corpses[golem] 0;};
	#math corpses[total] {$corpses[coffin] + $corpses[inventory] + $corpses[smuggle] + $corpses[freezer] + $corpses[cooler] + $corpses[servant] + $corpses[golem]};
	#delay 0.1 {
		#var corpse_string <088>ðŸ’€ <ceb>$corpses[total] <088>Corpses ðŸ’€\n;
	    #if {$corpses[coffin] > 0} {#var corpse_string $corpse_string C: $corpses[coffin];};
		#if {$corpses[inventory] > 0} {#var corpse_string $corpse_string I: $corpses[inventory];};
		#if {$corpses[smuggle] > 0} {#var corpse_string $corpse_string S: $corpses[smuggle];};
		#if {$corpses[freezer] > 0} {#var corpses[freezer] @min{$corpses[freezer];50};#var corpse_string $corpse_string F: $corpses[freezer];};
		#if {$corpses[cooler] > 0} {#var corpses[cooler] @min{$corpses[cooler];50};#var corpse_string $corpse_string Clr: $corpses[cooler];};
		#if {$corpses[servant] > 0} {#var corpse_string $corpse_string Srv: $corpses[servant];};
		#if {$corpses[golem] > 0} {#var corpse_string $corpse_string Gol: $corpses[golem];};
	};
};

#NOP -- Corpse use order is:  Coffin -> Freezer -> Cooler -> Golem/Servant -> Inventory -> Smuggle;
#alias corpse_select {

	#if {$corpses[smuggle] && !$corpses[inventory] && !$corpses[coffin] && !$corpses[freezer] && !$corpses[golem] && !$corpses[servant]} {
		smuggle remove corpse;drop corpse;
	};
	#if $corpses[coffin] {
		unwrap;
	} {
		#if $corpses[freezer] {
			deslab;
		} {
			#if $corpses[cooler] {
				uncooler corpse;
			} {
				#if {$corpses[golem] || $corpses[servant]} {
					#if $corpses[golem] {
						golem drop corpse;
					} {
						#NOP -- I forget what the command for servant to drop is;
					}
				} {
					unkeep corpse;drop corpse;
				};
			};
		};
	};
};

#alias check_box {
	#var box_name %1;
	#act {^-i-A colossal box (empty).$} {
		#var corpses[$box_name] 0;
	} {2};
	#act {^-i-A colossal box (contains %d items).$} {
		#var corpses[$box_name] %%1;
	} {2};
	#delay .1 {#unact {^-i-A colossal box (contains %d items).$}};
	#delay .1 {#unact {^-i-A colossal box (empty).$}};
};

#NOP -- SOL Crypt Boxes;
#alias check_crypts {
	go sol_crypt1;
	#delay 1 {check_box sol_crypt1;look};
	#delay 3 {
		go sol_crypt2;
		#delay 1 {check_box sol_crypt2;look};
	};
};

#NOP -- Inventory overrides.  These actions update the count when you check inventory;
#action {%*Death's Freezer%*\(%d corpses\)} {
	#var inventory[freezer] 1;
	#if $corpse_check {
		#if {%3 != $corpses[freezer]} {
			#var corpses[freezer] %3;
		};
	};
} {2};

#NOP -- Normal Coffin
#action {%*An enchanted coffin (%d %*.$} {
	#var inventory[coffin] 1;
	#if $corpse_check {
		#if {%2 != $corpses[coffin]} {
			#var corpses[coffin] %2;
		};
	};
} {2};

#NOP -- Coffin for Necromancers;
#action {%*Coffin%s\[%s%d\/%s%d|%*%\|%s%dc]%*} {
	#var inventory[coffin] 1;
	#if $corpse_check {
		#if {%9 != $corpses[coffin]} {
			#var corpses[coffin] %9;
		};
	};
} {2};


#NOP -- Corpse Management COFFIN / FREEZER;
#NOP -- Coffin wrapping gives the same message if you wrap 1 or 50, so we need to check inventory after wrapping for a correct count;
#var check_coffin 1;
#act {the coffin's protective hold!$} {
	#if $check_coffin {
		#var check_coffin 0;
		#delay 0.5 {i;#var check_coffin 1;};
	};
} {2};
#act {The coffin expels a corpse!} {#line gag;#echo {<169>Coffin: -1 corpse};#math corpses[coffin] {$corpses[coffin] - 1};} {2};
#act {The coffin expels all its corpses!} {#var corpses[coffin] 0;} {2};
#act {You picked up %d {corpse|corpses} into the coffin.} {#math corpses[coffin] {$corpses[coffin] + %1};} {2};
#act {There are no corpses in the coffin!} {#var corpses[coffin] 0;} {2};
      


#act {frame causing it to get sucked in!$} {#line gag;#echo {<169>Freezer: +1 corpse};#math {corpses[freezer]} {$corpses[freezer] + 1};} {2};
#act {^You shake the frame and out drops} {#line gag;#echo {<169>Freezer: -1 corpse};#math {corpses[freezer]} {$corpses[freezer] - 1};} {2};
#act {^There are no corpses in the freezer!$} {#var corpses[freezer] 0} {2};

#NOP -- Corpse Management Golem;
#action {The command is: inventory} {
	#var corpses[golem] 0;
	#var golem_update 1;
	#action {{(.*) corpse (.*)( \{([0-9]+)\})?}} {
		#if $golem_update {
			#var foundtimes 1;
			#regex {%%3} {7B{[0-9]+}} {#var foundtimes &1;};
			#math corpses[golem] {$corpses[golem] + $foundtimes};
		};
	} {2};
	#action {{(.*) remains (.*)( \{([0-9]+)\})?}} {
		#if $golem_update {
			#var foundtimes 1;
			#regex {%%3} {7B{[0-9]+}} {#var foundtimes &1;};
			#math corpses[golem] {$corpses[golem] + $foundtimes};
		};
	} {2};
} {5};

#action {Your packmule gives you %*corpse%*.} {
	#math corpses[golem] {$corpses[golem] - 1};
	#math corpses[inventory] {$corpses[inventory] + 1};
} {5};

#action {Your packmule gives you %*remains%*.} {
	#math corpses[golem] {$corpses[golem] - 1};
	#math corpses[inventory] {$corpses[inventory] + 1};
} {5};

#action {Estimated Capacity: %*} {
	#var golem_update 0;
	_update_corpse_string;
} {2};

#NOP -- Corpse Management Tech Ultra-Cooler;
#act {^You activate the Ultra-Cooler to retrieve the %*.$} {#math corpses[cooler] {$corpses[cooler] - 1}} {2};
#act {^You place the %* into the Ultra-Cooler.$} {#math corpses[cooler] {$corpses[cooler] + 1};#math {corpses[inventory]} {$corpses[inventory] - 1}} {2};
#act {^There is no more room in the Ultra-Cooler$} {#var corpses[cooler] 50} {2};
#act {^The cooler does not contain a corpse.$} {#var corpses[cooler] 0} {2};

#act {^The Tech Ultra-Cooler. It is large and oblong. The top of it is made} {
	#var inventory[cooler] 1;
	#var corpses[cooler] 0;
	#var cooler_update 1;
	#action {{^The (.*)(corpse|remains) of (.*)}} {
		#if $cooler_update {#math corpses[cooler] {$corpses[cooler] + 1}};
	} {6};
	#delay 2 {#var cooler_update 0;};
} {2};

#NOP -- Corpse Management INVENTORY;
#act {^You drop %* {corpse|remains}%*.$} {#math {corpses[inventory]} {$corpses[inventory] - 1};} {2};
#act {^%* {corpse|remains}%*: Taken.} {#math {corpses[inventory]} {$corpses[inventory] + 1};} {2};
#act {^%* {corpse|remains}%*: Ok.$} {#math {corpses[inventory]} {$corpses[inventory] + 1};} {2};
#act {^%s%+1..d %* {corpse|remains}%*.$} {#if $corpse_check {#math {corpses[inventory]} {$corpses[inventory] + %2};};} {2};
#act {%*Encumberance%s\[%s%d\/%s%d|%*%\|%s%dc]%*} {
	#if $corpse_check {
		#if {%9 != $corpses[inventory]} {
			#var corpses[inventory] %9;
		};
	};
	#var inventory[encumberance] %7;
} {2};

#NOP -- Corpse Management SMUGGLE;
#act {^Items you are currently smuggling (%*):} {
	#var smuggle_update 1;
	#var corpses[smuggle] 0;
	#action {{^>(.*)(corpse|remains)(.*)}} {
		#if $smuggle_update {#math corpses[smuggle] {$corpses[smuggle] + 1}};
	} {6};
	#delay 2 {
		#var smuggle_update 0;
	};
	
} {2};

#action {%*Smuggling%s\[%s%d\/%s%d|%*%\|%s%dc]%*} {
	#if $corpse_check {
		#if {%9 != $corpses[smuggle]} {
			#var corpses[smuggle] %9;
		};
	};
} {2};

#NOP -- Corpse Management PRIEST SERVANT;
#act {%* swirls slowly and reveals that it is carrying:$} {
	#var corpses[servant] 0;
	#act {^%s%d\)%* corpse%*.$} {#math {corpses[servant]} {$corpses[servant] + 1};};
	#delay 4 {#unact {^%s%d\)%* corpse%*.$}};
} {2};
#act {^You take %* corpse %* from ElBefe.$} {#math {corpses[servant]} {$corpses[servant] - 1};} {2};

#act {^> %* corpse%*} {#math {corpses[smuggle]} {$corpses[smuggle] + 1}} {2};
#act {^You smuggle away: %* corpse%*} {
	#math {corpses[smuggle]} {$corpses[smuggle] + 1};
	#math {corpses[inventory]} {$corpses[inventory] - 1};
} {2};

#act {^You unsmuggle: %* corpse%*} {
	#math {corpses[smuggle]} {$corpses[smuggle] - 1};
	#math {corpses[inventory]} {$corpses[inventory] + 1};
} {2};


#class {corpse_manager} {close}