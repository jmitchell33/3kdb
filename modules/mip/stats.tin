#class {mipstats} {open};

#NOP ***** Combined Stats Data *****
#ALIAS {.mipProcessFFF} {
	#VAR {mip[FFF][flag]} {0};
	#VAR {mip[FFF][toggle]} {0};
	#PARSE {%1} {i} {
		#IF {"$mip[FFF][flag]" == "0"} {
			#VAR {mip[FFF][flag]} {$i};
			#VAR {mip[FFF][$i]} {};
			#VAR {mip[FFF][$i][data]} {};
		} {
			#IF {"$i" == "~"} {
				#IF {"$mip[FFF][toggle]" == "0"} {
					#VAR {mip[FFF][toggle]} {1};
				} {
					.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]};
					#VAR {mip[FFF][flag]} {0};
					#VAR {mip[FFF][toggle]} {0};
				}
			} {
				#VAR {mip[FFF][${mip[FFF][flag]}][data]} {${mip[FFF][${mip[FFF][flag]}][data]}${i}}
			}
		}
	};
	#IF {"$mip[FFF][$mip[FFF][flag]][data]" != ""} {
		.mipProcessFFFSub {$mip[FFF][flag]} {$mip[FFF][${mip[FFF][flag]}][data]}
	}

    _update_status;
}

#NOP ***** Separated Stats Data *****
#ALIAS {.mipProcessFFFSub} {
	#SWITCH {"%1"} {
		#CASE {"A"} {#NOP Hit Points;#VAR {my[hp][current]} {%2};#math my[hp][percent] {1.00 * $my[hp][current] / $my[hp][max]};};
		#CASE {"B"} {#NOP Hit Points Maximum;#VAR {my[hp][max]} {%2};};
		#CASE {"C"} {#NOP Spell Points;#VAR {my[sp][current]} {%2};#math my[sp][percent] {1.00 * $my[sp][current] / $my[sp][max]};};
		#CASE {"D"} {#NOP Spell Points Maximum;#VAR {my[sp][max]} {%2};};
		#CASE {"E"} {#NOP Guild Points1;#VAR {my[gp1][current]} {%2};#math my[gp1][percent] {1.00 * $my[gp1][current] / $my[gp1][max]};};
		#CASE {"F"} {#NOP Guild Points1 Maximum;#VAR {my[gp1][max]} {%2};};
		#CASE {"G"} {#NOP Guild Points2;#VAR {my[gp2][current]} {%2};#math my[gp2][percent] {1.00 * $my[gp2][current] / $my[gp2][max]};};
		#CASE {"H"} {#NOP Guild Points2 Maximum;#VAR {my[gp2][max]} {%2};};
		#CASE {"I"} {#NOP Primary Guild Line;.mipProcessGline {1} {%2}};
		#CASE {"J"} {#NOP Secondary Guild Line;.mipProcessGline {2} {%2}};
		#CASE {"K"} {#NOP Mob Fighting;.mipProcessFFFK {%2}};
		#CASE {"L"} {#NOP Mob Health;#math enemy[hp_change] {$enemy[hp] - %2};#format {enemy[hp]} {%d} {%2};};
		#CASE {"M"} {#NOP Mob Image File};
		#CASE {"N"} {
			#var {mip[last_round]} {$mip[round]};
			#VAR {mip[round]} {%2};
			#NOP -- If round is the same or 0, you're no longer in combat;
			#NOP -- There's also a ticker to check this since this doesn't always fire at the end of a fight if no;
			#NOP -- new MIP line is received;
			#if {$mip[round] == $mip[last_round] || $mip[round] == 0} {
				#var incombat 0
			} {
				#var incombat 1;
				#var last_fight_rounds %2;
			};
			
			#NOP Combat Round Counter;
			#if !$total_rounds {#var total_rounds 1} {#math total_rounds {$total_rounds + 1}};
			#format total_rounds_string {%g} {$total_rounds};

			#NOP -- Average the first 10 rounds of combat to see if it'll be a fast or longer fight;
			#NOP -- This is useful for some powers to save if it's a very fast fight;
			#NOP -- If it's a long fight (>100 rounds) it will default to 100;
			#if {$mip[round] <= 10 && $mip[round] > 1} {
				#var enemy[hp_change] @max{$enemy[hp_change];1};
				#math enemy[kill_rate][${enemy[kill_rate_avg_count]}] {100 / $enemy[hp_change]};
				#format {enemy[last_round]} {%d} {$mip[round]};
				#var tempAvg 0;
				#foreach $enemy[kill_rate][%*] index {
					#math tempAvg {$tempAvg + $index};
				};
				#math enemy[kill_rate_avg] {$tempAvg / &enemy[kill_rate][%*]};
				#math enemy[kill_rate_avg_count] {$enemy[kill_rate_avg_count] + 1};
			};
		};
		#DEFAULT {#NOP Every other non-handled flag}
	}
}

#NOP ***** Combat Mob Name *****;
#ALIAS {.mipProcessFFFK} {
	#IF {"%1" != ""} {
		#VAR {enemy} {};
		#var enemy[name] %1;

		#nop -- Try to lowercase the name and replace the articles with blanks to get a "target";
		#format enemy[target] {%l} {%1};
		#replace enemy[target] {\ba\b} {};
		#replace enemy[target] {\ban\b} {};
		#replace enemy[target] {\bthe\b} {};
		#format enemy[target] {%p} {$enemy[target]};
	} {
		#var {enemy[last][name]} {$enemy[name]};
		#VAR {enemy[name]} {};
		#VAR {enemy[target]} {};
		#VAR {enemy[graph]} {};
		#VAR {enemy[hp]} {}
	};
};

#NOP ***** Guild Stats Line 1/2 *****
#ALIAS {.mipProcessGline} {
	#VAR {mip[gline][%1]} {%2};
	#VAR {temp} {};

	#NOP GUILD SPECIFIC GLINE PROCESSING;
	#IF {"%2" != ""} {
		#SWITCH {"$guild"} {
			#CASE {"changeling"}	{.mipProcessGlineChangeling {%1}};
			#CASE {"elemental"}		{.mipProcessGlineElemental {%1}};
			#CASE {"juggernaut"}	{.mipProcessGlineJuggernaut {%1}};
			#CASE {"necromancer"}	{.mipProcessGlineNecromancer {%1}};
			#CASE {"bard"}			{.mipProcessGlineBard {%1}};
			#CASE {"gentech"}		{.mipProcessGlineGentech {%1}};
			#CASE {"mage"}			{.mipProcessGlineMage {%1}};
			#CASE {"sii"}			{.mipProcessGlineSii {%1}};
			#CASE {"monk"} 			{.mipProcessGlineMonk {%1}};
			#CASE {"fremen"}        {.mipProcessGlineFremen {%1}};
		}
	};
};

#ALIAS {.mipProcessGlineChangeling} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Chaos Flux: %d/%d} {
			#VAR {my[relinquish][current]}	{&1};
			#VAR {my[relinquish][reset]}	{&2}
		};
		#REGEX {$mip[gline][1]} {{Density|Homeostasis|Mitosis|Morphogenesis|Resilience}: %d.%d\%} {
			#VAR {my[skill][name]}		{&1};
			#VAR {my[skill][current]}	{&2.&3}
		};
		#REGEX {$mip[gline][1]}	{\[{FF|IL}\(%d\): %d.%d\%\]>  \[%D\]} {
			#VAR {my[ff][current]}		{&3.&4};
			#VAR {my[form]}			{&5}
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{\[Bioplasts: %d\]} {#VAR {my[bioplasts]}	{&1}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
};

#ALIAS {.mipProcessGlineMage} {
	#NOP -- DISABLED PARTIALLY BUT LEAVE THE CODE IN CASE ITS FIXED;
	#NOP -- MIP DATA IN MAGES IS EXTREMELY UNRELIABLE AND WILL NOT POST FOR 1-3ish ROUNDS AT A TIME;
	#NOP -- PROTECTION MAINTENANCE IS MANAGED VIA HPBAR;

	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Gem:%d\%}  		{#VAR {my[gem]}				   {&1}	}	{#VAR {my[gem]}					{0}	};
		#REGEX {$mip[gline][1]}	{MC:%d}				{#VAR {my[mental_cognition]}   {&1}	}	{#NOP};
		#REGEX {$mip[gline][1]}	{*I%d*}				{#VAR {my[immersion][rounds]}  {&1}	}	{#VAR {my[immersion][rounds]}	{0}	};

		#format hpbar_prots_active {%L} {${hpbar_prots}};
		#NOP #if {$hpbar_prots_active > 0} {#NOP} {	;
		#NOP	#REGEX {$mip[gline][1]}	{SS>}				{#VAR {my[prots][SS]}		   {1}	}	{#VAR {my[prots][SS]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{PA}				{#VAR {my[prots][PA]}		   {1}	}	{#VAR {my[prots][PA]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{{PS|PS!}}			{#VAR {my[prots][PS]}		   {1}	}	{#VAR {my[prots][PS]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{{<gA|<yA}}			{#VAR {my[prots][A]}		   {1}	}	{#VAR {my[prots][A]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{{<gB|<yB}}			{#VAR {my[prots][B]}		   {1}	}	{#VAR {my[prots][B]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{MB}				{#VAR {my[prots][MB]}		   {1}	}	{#VAR {my[prots][MB]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{<yS>}  			{#VAR {my[prots][S]}		   {1}	}	{#VAR {my[prots][S]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{MS}				{#VAR {my[prots][MS]}		   {1}	}	{#VAR {my[prots][MS]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{{M>|M!>}}			{#VAR {my[prots][M]}		   {1}	}	{#VAR {my[prots][M]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{RS}				{#VAR {my[prots][RS]}		   {1}	}	{#VAR {my[prots][RS]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{MG>}				{#VAR {my[prots][MG]}		   {1}	}	{#VAR {my[prots][MG]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{mg}				{#VAR {my[prots][mg]}		   {1}	}	{#VAR {my[prots][mg]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{PG}				{#VAR {my[prots][PG]}		   {1}	}	{#VAR {my[prots][PG]}			{0}	};      ;
		#NOP	#REGEX {$mip[gline][1]}	{PE}				{#VAR {my[prots][PE]}		   {1}	}	{#VAR {my[prots][PE]}			{0}	};      ;
		#NOP };	;
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{G: %d\/%d\%}		{#VAR {my[golem][current]}		{&1};
													 #VAR {my[golem][reset]}		{&2}};
		#REGEX {$mip[gline][2]}	{S: %d\/%d\%}		{#VAR {my[super][current]}		{&1};
													 #VAR {my[super][reset]}		{&2}};
		#REGEX {$mip[gline][2]}	{G2N:%d\%}			{#VAR {my[g2n]}					{&1}};
		#REGEX {$mip[gline][2]}	{I: %d}				{#VAR {my[immersion][count]}	{&1}};

	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>}
	}
};

#ALIAS {.mipProcessGlineElemental} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{Emit> : <%w%d>} 			{#VAR {my[emit][level]}		{&2}};
		#REGEX {$mip[gline][1]}	{Form>: <c%w>\(<r%d>\)}		{#VAR {my[form][type]}		{&1};
															 #VAR {my[form][size]}		{&2};};
		#REGEX {$mip[gline][1]}	{Rating>: <r%d>}			{#VAR {my[rating]}		{&1}};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {{Blasts|Gems|Stones}/Waves/Shrouds>: <%w%d>/<%w%d>/<%w%d>\(%d\%\)} {
			#VAR {my[blasts]}		{&3};
			#VAR {my[waves]}		{&5};
			#VAR {my[shrouds]}		{&7};
			#VAR {my[reset]}		{&8};
		};
		#REGEX {$mip[gline][2]} {G2N: <%w%d>}			{#VAR {my[g2n]}			{&2}}
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	}
};

#ALIAS {.mipProcessGlineGentech} {
	#var my[cpc][max] 10000;
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]}	{CPC:\<%?%d\>} {#VAR {my[cpc][current]} {&2}};
		#REGEX {$mip[gline][1]}	{G2N:%d} {#VAR {my[g2n]} {&1}};
		#REGEX {$mip[gline][1]}	{TS:%d} {#VAR {my[timeslide][personal]} {&1}};
		#REGEX {$mip[gline][1]}	{Reset\(\<%?%d\%\>\)} {#VAR {my[timeslide][reset]} {&2}};
		#REGEX {$mip[gline][1]}	{E-TS:%d} {#VAR {my[timeslide][emergency]} {&1}};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Bias\[\<%?%w\>\]} {#VAR {my[bias][status]} {&2}};
		#REGEX {$mip[gline][2]}	{Atk\(\<%?%d\%\>\)} {#VAR {my[bias][attack]} {&2}};
		#REGEX {$mip[gline][2]}	{Def\(\<%?%d\%\>\)} {#VAR {my[bias][defense]} {&2}};
		#REGEX {$mip[gline][2]}	{Efield\>\(\<%?%d%w\>\)} {#VAR {my[efield]} {&2}};
		#REGEX {$mip[gline][2]}	{Edna\(\<%?%d%w\>\)} {#VAR {my[edna]} {&2}};
		#REGEX {$mip[gline][2]}	{Illum\(\<%?%w\>\)} {#VAR {my[illum]} {&2}};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	}
};

#ALIAS {.mipProcessGlineFremen} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {FOCUS: %w} {#VAR {my[litany][focus]} {&1}}; 
		#REGEX {$mip[gline][1]} {GXP: %d} {#VAR {my[g2n]} {&1}};
		#VAR {my[gxp][last_round]} {$my[g2n]};
        #math {my[gxp][total]} {$my[gxp][total] + $my[gxp][last_round]};
        #math {my[gxp][rounds_tracked]} {$total_rounds - $my[gxp][starting_round]};
        #math {my[gxp][average]} {$my[gxp][total] / $my[gxp][rounds_tracked]};
        #math {my[gxp][average_per_hr]} {$my[gxp][average] * 30 * 60};
        #format {my[gxp][str_average_per_hr]} {%M} {$my[gxp][average_per_hr]};
        #format {my[gxp][str_total]} {%M} {$my[gxp][total]};
        #format {my[gxp][str_total]} {%p} {$my[gxp][str_total]};
        #format my[gxp][str_rounds] {%g} {$my[gxp][rounds_tracked]};
        .gxp_time;
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {POISON: %d/%d\%} {
			#VAR {my[fremen][poisons]} {&1};
			#VAR {my[poisons][reset]} {&2};
		};
		#REGEX {$mip[gline][2]} {LIMBERNESS: %d\%} {
			#VAR {my[limberness]} {&1};
		}; #ELSE {
			#ECHO {<171> Invalid Gline Number <088>};
		}
	};
};

#ALIAS {.mipProcessGlineJuggernaut} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {Ammo:\[%*\] <yGxp: %d.%d\%> Hits: \[%d\] <cCoffin: {\d+/\d+|N/A}} {
			#if $my[gxp][best] {#NOP} {#var my[gxp][best] 0;};
			#var my[gxp][last] $my[gxp][current];
			#regex {&1} {{%d/}*} {
				#VAR {ammo[1]}			{&1};
				#VAR {ammo[2]}			{&2};
				#VAR {ammo[3]}			{&3};
				#VAR {ammo[4]}			{&4};
				#VAR {ammo[5]}			{&5};
			};
			
			#VAR {my[gxp][current]}			{&2.&3};
			#VAR {gxp}			{&2.&3};
			#VAR {hits}			{&4};
			#VAR {corpses[coffin]}		{&5};
			#replace corpses[coffin] {/%*} {};
			#math my[gxp][change] {$my[gxp][current] - $my[gxp][last]};
			#if $my[gxp][total_gained] {#math my[gxp][total_gained] {$my[gxp][total_gained] + $my[gxp][change]}} {#var my[gxp][total_gained] $my[gxp][change]};
			#math my[gxp][average] {$my[gxp][total_gained] / $total_rounds};
			#if {$my[gxp][change] > $my[gxp][best]} {#var my[gxp][best] $my[gxp][change]};
		}
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Nukes: \[%d/%d\]>} {
			#format {my[nukes]} {%d}	 {&1};
			#format {my[nukes_max]} {%d} {&2};
			#format {reset} {%d} 	 {&3};
		};
		#REGEX {$mip[gline][2]} {Frenzy: \[%d/%d\]>} {
			#format {my[clan]} {%d}	 {&1};
			#format {my[clan_max]} {%d} {&2};
		};
		#REGEX {$mip[gline][2]} {Support: \[%d/%d\]>} {
			#format {my[clan]} {%d}	 {&1};
			#format {my[clan_max]} {%d} {&2};
		};
		#REGEX {$mip[gline][2]} {Airdrop: \[%d/%d\]>} {
			#format {my[clan]} {%d}	 {&1};
			#format {my[clan_max]} {%d} {&2};
		};
		#REGEX {$mip[gline][2]} {Reset: \[%d\%\]} {
			#format {reset} {%d} 	 {&1};
		};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	}
}

#ALIAS {.mipProcessGlineNecromancer} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {C:%d}		{#VAR {corpses[inventory]}	{&1}};
		#REGEX {$mip[gline][1]} {Worth:%d}	{#VAR {my[necromancer][worth]}		{&1}};
		#REGEX {$mip[gline][1]} {Tport:%d/%d}	{
			#VAR {my[necromancer][teleports][current]}	{&1};
			#VAR {my[necromancer][teleports][max]}		{&2};
		};
		#REGEX {$mip[gline][1]} {Fury:%d/%d}	{
			#VAR {my[necromancer][glamors][current]}	{&1};
			#VAR {my[necromancer][glamors][max]}		{&2};
		};
		#REGEX {$mip[gline][1]} {Sprk:%d/%d}	{
			#VAR {my[necromancer][glamors][current]}	{&1};
			#VAR {my[necromancer][glamors][max]}		{&2};
		};
		#REGEX {$mip[gline][1]} {Illu:%d/%d}	{
			#VAR {my[necromancer][glamors][current]}	{&1};
			#VAR {my[necromancer][glamors][max]}		{&2};
		};
		#REGEX {$mip[gline][1]} {furious}	{
			#VAR {my[necromancer][glamors][furious]} 1;
		} {
			#VAR {my[necromancer][glamors][furious]} 0;
		};
		#REGEX {$mip[gline][1]} {raging}	{
			#VAR {my[necromancer][glamors][raging]} 1;
		} {
			#VAR {my[necromancer][glamors][raging]} 0;
		};
		#REGEX {$mip[gline][1]} {illuming}	{
			#VAR {my[necromancer][glamors][illuming]} 1;
		} {
			#VAR {my[necromancer][glamors][illuming]} 0;
		};


		#REGEX {$mip[gline][1]} {Prot:%wX}	{#VAR {my[prot]}		{&1}};
		#REGEX {$mip[gline][1]} {Circle:%d}	{#VAR {my[gxp]}			{&1}};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]}	{Undead:%w}	{#VAR {my[undead]}		{&1}};
		#REGEX {$mip[gline][2]}	{HPf:%d/%d}	{
			#VAR {my[hp][fuse][current]}	{&1};
			#VAR {my[hp][fuse][max]}	{&2};
		};
		#REGEX {$mip[gline][2]}	{SPf:%d/%d}	{
			#VAR {my[sp][fuse][current]}	{&1};
			#VAR {my[sp][fuse][max]}	{&2};
		};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	};
}

#ALIAS {.mipProcessGlineMonk} {
	#IF {%1 == 1} {
		#NOP;
	}; #ELSEIF {%1 == 2} {
		#NOP;
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	};
};


#ALIAS {.mipProcessGlineBard} {
	#IF {%1 == 1} {
		#nop Protection Info;
		#REGEX {$mip[gline][1]} { FR:%d}	{#VAR {my[defs][fr]}		{&1}}   {#var {my[defs][fr]}    {0}};
		#REGEX {$mip[gline][1]} { PE:%d}	{#VAR {my[defs][pe]}		{&1}}   {#var {my[defs][pe]}    {0}};
		#REGEX {$mip[gline][1]} { PN:%d}	{#VAR {my[defs][pn]}		{&1}}   {#var {my[defs][pn]}    {0}};
		#REGEX {$mip[gline][1]} { PG:%d}	{#VAR {my[defs][pg]}		{&1}}   {#var {my[defs][pg]}    {0}};
		#REGEX {$mip[gline][1]} { PF:%d}	{#VAR {my[defs][pf]}		{&1}}   {#var {my[defs][pf]}    {0}};
		#REGEX {$mip[gline][1]} { PH:%d}	{#VAR {my[defs][ph]}		{&1}}   {#var {my[defs][ph]}    {0}};
		#REGEX {$mip[gline][1]} { HS:%d}	{#VAR {my[defs][hs]}		{&1}}   {#var {my[defs][hs]}    {0}};
		#REGEX {$mip[gline][1]} { O:%d}		{#VAR {my[defs][o]}			{&1}}	{#var {my[defs][o]}     {0}};
		#REGEX {$mip[gline][1]} { V:%d}		{#VAR {my[defs][v]}			{&1}}	{#var {my[defs][v]}		{0}};
		#REGEX {$mip[gline][1]} { R:%d}		{#VAR {my[defs][r]}			{&1}}	{#var {my[defs][r]}		{0}};
		#REGEX {$mip[gline][1]} { AG:%d}	{#VAR {my[defs][ag]}		{&1}}	{#var {my[defs][ag]}	{0}};
		#REGEX {$mip[gline][1]} { ES:%d}	{#VAR {my[defs][es]}		{&1}}	{#var {my[defs][es]}	{0}};
		#REGEX {$mip[gline][1]} { B:%d}		{#VAR {my[defs][blink]}		 {&1}}	{#var {my[defs][blink]} {0}};
		#REGEX {$mip[gline][1]} { HR}		{#VAR {my[defs][hr]}		{1}}   {#var {my[defs][hr]}    {0}};
		#REGEX {$mip[gline][1]} { MB}		{#VAR {my[defs][mb]}		 {1}}	{#var {my[defs][mb]}    {0}};
		#REGEX {$mip[gline][1]} { ab}		{#VAR {my[defs][ab]}		 {1}}	{#var {my[defs][ab]}    {0}};
		#REGEX {$mip[gline][1]} { AB}		{#VAR {my[defs][AB]}		 {1}}	{#var {my[defs][AB]}    {0}};
		#REGEX {$mip[gline][1]} { RF}		{#VAR {my[defs][rf]}		 {1}}	{#var {my[defs][rf]}    {0}};
		#REGEX {$mip[gline][1]} { CS}		{#VAR {my[defs][cs]}		 {1}}	{#var {my[defs][cs]}    {0}};
		#REGEX {$mip[gline][1]} { *M*}		{#VAR {my[defs][m]}		     {1}}	{#var {my[defs][m]}    {0}};

	}; #ELSEIF {%1 == 2} {
		#nop Smile, GXP, Song Performing, Rounds left;
		#REGEX {$mip[gline][2]} { S:%d}		{#VAR {my[smile]}		{&1}};
		#REGEX {$mip[gline][2]} { NGL: %d%}	{#VAR {my[g2nl]}		{&1}};
		#REGEX {$mip[gline][2]} { %*: %d} {
			#var song_match 0;
			#foreach $bardSongs[%*] {song} {
				#regexp {"$song[name]"} {"&1"} {
					#var song_match 1;
					#var my[song][title] &1;
					#var my[song][rounds] &2;
					#math my[song][completion] {$my[song][rounds] * 2};
				};
			};
			#if !$song_match {#unvar my[song][title];#var my[song][rounds] 0;};
		};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	};
};

#ALIAS {.mipProcessGlineSii} {
	#IF {%1 == 1} {
		#REGEX {$mip[gline][1]} {GXP:%d}			{#VAR {my[gxp][round]}		{&1}};
		#REGEX {$mip[gline][1]} {CL:%d.%d}			{#VAR {my[gxp][g2n]}		{&1.&2}};
		#REGEX {$mip[gline][1]} {Regen:%w}			{#VAR {my[regen]}			{&1}};
	}; #ELSEIF {%1 == 2} {
		#REGEX {$mip[gline][2]} {Overload:%d.%d (%w)}			{
			#VAR {my[overload][current]}			{&1.&2};
			#VAR {my[overload][status]}			    {&3};
		};
		#REGEX {$mip[gline][2]} {PC:%w}			{#VAR {my[cloak]}			{&1};};
		#REGEX {$mip[gline][2]} {PG:%w}			{#VAR {my[ghost]}			{&1};};
	}; #ELSE {
		#ECHO {<171> Invalid Gline Number <088>};
	};
}

#NOP ***** Guild Stats Line Colour Handling *****
#FUNCTION {fMipColourConv} {
	#VAR {result} {%1};
	#REPLACE {result} {>} {<099>};
	#REPLACE {result} {<y} {<839>};
	#REPLACE {result} {<r} {<819>};
	#REPLACE {result} {<b} {<849>};
	#REPLACE {result} {<g} {<829>};
	#REPLACE {result} {<c} {<869>};
	#REPLACE {result} {<v} {<859>};
	#REPLACE {result} {<s} {<279>};
	#REPLACE {result} {<w} {};
}

#class {mipstats} {close};